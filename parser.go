// Copyright (c) 2014 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Inital yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ goyacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package ql

import __yyfmt__ "fmt"

import (
	"fmt"

	"github.com/cznic/mathutil"
)

type yySymType struct {
	yys  int
	line int
	col  int
	item interface{}
	list []interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57453
	yyEOFCode      = -1
	add            = 57345
	alter          = 57346
	and            = 57347
	andand         = 57348
	andnot         = 57349
	as             = 57350
	asc            = 57351
	begin          = 57352
	between        = 57353
	bigIntType     = 57354
	bigRatType     = 57355
	blobType       = 57356
	boolType       = 57357
	by             = 57358
	byteType       = 57359
	column         = 57360
	commit         = 57361
	complex128Type = 57362
	complex64Type  = 57363
	create         = 57364
	deleteKwd      = 57365
	desc           = 57366
	distinct       = 57367
	drop           = 57368
	durationType   = 57369
	eq             = 57370
	yyErrCode      = 57344
	exists         = 57371
	falseKwd       = 57372
	float32Type    = 57374
	float64Type    = 57375
	floatLit       = 57376
	floatType      = 57373
	from           = 57377
	ge             = 57378
	group          = 57379
	identifier     = 57380
	ifKwd          = 57381
	imaginaryLit   = 57382
	in             = 57383
	index          = 57384
	insert         = 57385
	int16Type      = 57387
	int32Type      = 57388
	int64Type      = 57389
	int8Type       = 57390
	intLit         = 57392
	intType        = 57386
	into           = 57391
	is             = 57393
	le             = 57394
	like           = 57395
	limit          = 57396
	lsh            = 57397
	neq            = 57398
	not            = 57399
	null           = 57400
	offset         = 57401
	on             = 57402
	order          = 57403
	oror           = 57404
	qlParam        = 57405
	rollback       = 57406
	rsh            = 57407
	runeType       = 57408
	selectKwd      = 57409
	set            = 57410
	stringLit      = 57412
	stringType     = 57411
	tableKwd       = 57413
	timeType       = 57414
	transaction    = 57415
	trueKwd        = 57416
	truncate       = 57417
	uint16Type     = 57419
	uint32Type     = 57420
	uint64Type     = 57421
	uint8Type      = 57422
	uintType       = 57418
	unique         = 57423
	update         = 57424
	values         = 57425
	where          = 57426

	yyMaxDepth = 200
	yyTabOfs   = -200
)

var (
	yyXLAT = map[int]int{
		59:    0,   // ';' (179x)
		-1:    1,   // $end (178x)
		41:    2,   // ')' (152x)
		44:    3,   // ',' (120x)
		40:    4,   // '(' (115x)
		57401: 5,   // offset (100x)
		43:    6,   // '+' (99x)
		45:    7,   // '-' (99x)
		94:    8,   // '^' (99x)
		57396: 9,   // limit (97x)
		57403: 10,  // order (85x)
		57380: 11,  // identifier (83x)
		57426: 12,  // where (80x)
		57379: 13,  // group (75x)
		57404: 14,  // oror (74x)
		57377: 15,  // from (72x)
		57351: 16,  // asc (68x)
		57366: 17,  // desc (68x)
		93:    18,  // ']' (67x)
		57350: 19,  // as (66x)
		58:    20,  // ':' (64x)
		57348: 21,  // andand (62x)
		124:   22,  // '|' (55x)
		57399: 23,  // not (55x)
		57353: 24,  // between (53x)
		57383: 25,  // in (53x)
		60:    26,  // '<' (52x)
		62:    27,  // '>' (52x)
		57370: 28,  // eq (52x)
		57378: 29,  // ge (52x)
		57393: 30,  // is (52x)
		57394: 31,  // le (52x)
		57395: 32,  // like (52x)
		57398: 33,  // neq (52x)
		57354: 34,  // bigIntType (50x)
		57355: 35,  // bigRatType (50x)
		57356: 36,  // blobType (50x)
		57357: 37,  // boolType (50x)
		57359: 38,  // byteType (50x)
		57362: 39,  // complex128Type (50x)
		57363: 40,  // complex64Type (50x)
		57369: 41,  // durationType (50x)
		57374: 42,  // float32Type (50x)
		57375: 43,  // float64Type (50x)
		57373: 44,  // floatType (50x)
		57387: 45,  // int16Type (50x)
		57388: 46,  // int32Type (50x)
		57389: 47,  // int64Type (50x)
		57390: 48,  // int8Type (50x)
		57386: 49,  // intType (50x)
		57400: 50,  // null (50x)
		57408: 51,  // runeType (50x)
		57411: 52,  // stringType (50x)
		57414: 53,  // timeType (50x)
		57419: 54,  // uint16Type (50x)
		57420: 55,  // uint32Type (50x)
		57421: 56,  // uint64Type (50x)
		57422: 57,  // uint8Type (50x)
		57418: 58,  // uintType (50x)
		57372: 59,  // falseKwd (48x)
		57376: 60,  // floatLit (48x)
		57382: 61,  // imaginaryLit (48x)
		57392: 62,  // intLit (48x)
		57405: 63,  // qlParam (48x)
		57412: 64,  // stringLit (48x)
		57416: 65,  // trueKwd (48x)
		57487: 66,  // Type (47x)
		42:    67,  // '*' (46x)
		57470: 68,  // Conversion (46x)
		57428: 69,  // Literal (46x)
		57488: 70,  // Operand (46x)
		57449: 71,  // PrimaryExpression (46x)
		57491: 72,  // QualifiedIdent (46x)
		57347: 73,  // and (45x)
		33:    74,  // '!' (44x)
		37:    75,  // '%' (43x)
		38:    76,  // '&' (43x)
		47:    77,  // '/' (43x)
		57349: 78,  // andnot (43x)
		57397: 79,  // lsh (43x)
		57407: 80,  // rsh (43x)
		57478: 81,  // UnaryExpr (42x)
		57438: 82,  // PrimaryTerm (35x)
		57475: 83,  // PrimaryFactor (31x)
		91:    84,  // '[' (30x)
		57432: 85,  // Factor (20x)
		57471: 86,  // Factor1 (20x)
		57451: 87,  // Term (19x)
		57482: 88,  // Expression (18x)
		57496: 89,  // ColumnName (10x)
		57443: 90,  // TableName (9x)
		57409: 91,  // selectKwd (7x)
		57501: 92,  // ExpressionList (6x)
		57469: 93,  // Call (5x)
		57465: 94,  // Index (5x)
		57429: 95,  // Slice (5x)
		57492: 96,  // ColumnDef (4x)
		57368: 97,  // drop (4x)
		57371: 98,  // exists (4x)
		57381: 99,  // ifKwd (4x)
		57384: 100, // index (4x)
		57495: 101, // SelectStmt (4x)
		57413: 102, // tableKwd (4x)
		57425: 103, // values (4x)
		57468: 104, // WhereClause (4x)
		61:    105, // '=' (2x)
		57345: 106, // add (2x)
		57346: 107, // alter (2x)
		57436: 108, // AlterTableStmt (2x)
		57485: 109, // Assignment (2x)
		57352: 110, // begin (2x)
		57439: 111, // BeginTransactionStmt (2x)
		57358: 112, // by (2x)
		57454: 113, // ColumnNameList (2x)
		57361: 114, // commit (2x)
		57458: 115, // CommitStmt (2x)
		57364: 116, // create (2x)
		57486: 117, // CreateIndexStmt (2x)
		57457: 118, // CreateTableStmt (2x)
		57455: 119, // CreateTableStmt1 (2x)
		57444: 120, // CreateTableStmt2 (2x)
		57456: 121, // DeleteFromStmt (2x)
		57365: 122, // deleteKwd (2x)
		57493: 123, // DropIndexStmt (2x)
		57431: 124, // DropTableStmt (2x)
		57466: 125, // EmptyStmt (2x)
		57489: 126, // Field (2x)
		57497: 127, // GroupByClause (2x)
		57385: 128, // insert (2x)
		57467: 129, // InsertIntoStmt (2x)
		57500: 130, // OrderBy (2x)
		57452: 131, // RecordSet (2x)
		57450: 132, // RecordSet1 (2x)
		57406: 133, // rollback (2x)
		57502: 134, // RollbackStmt (2x)
		57498: 135, // SelectStmtGroup (2x)
		57476: 136, // SelectStmtLimit (2x)
		57442: 137, // SelectStmtOffset (2x)
		57472: 138, // SelectStmtOrder (2x)
		57460: 139, // SelectStmtWhere (2x)
		57410: 140, // set (2x)
		57461: 141, // Statement (2x)
		57417: 142, // truncate (2x)
		57490: 143, // TruncateTableStmt (2x)
		57424: 144, // update (2x)
		57434: 145, // UpdateStmt (2x)
		46:    146, // '.' (1x)
		57427: 147, // AssignmentList (1x)
		57477: 148, // AssignmentList1 (1x)
		57474: 149, // AssignmentList2 (1x)
		57440: 150, // Call1 (1x)
		57360: 151, // column (1x)
		57448: 152, // ColumnNameList1 (1x)
		57446: 153, // ColumnNameList2 (1x)
		57479: 154, // CreateIndexIfNotExists (1x)
		57499: 155, // CreateIndexStmtUnique (1x)
		57367: 156, // distinct (1x)
		57464: 157, // DropIndexIfExists (1x)
		57481: 158, // ExpressionList1 (1x)
		57483: 159, // ExpressionList2 (1x)
		57494: 160, // Field1 (1x)
		57484: 161, // FieldList (1x)
		57437: 162, // InsertIntoStmt1 (1x)
		57433: 163, // InsertIntoStmt2 (1x)
		57430: 164, // InsertIntoStmt3 (1x)
		57391: 165, // into (1x)
		57402: 166, // on (1x)
		57480: 167, // OrderBy1 (1x)
		57435: 168, // oSet (1x)
		57459: 169, // RecordSet11 (1x)
		57447: 170, // RecordSet2 (1x)
		57441: 171, // RecordSetList (1x)
		57463: 172, // SelectStmtDistinct (1x)
		57445: 173, // SelectStmtFieldList (1x)
		57462: 174, // StatementList (1x)
		57415: 175, // transaction (1x)
		57423: 176, // unique (1x)
		57473: 177, // UpdateStmt1 (1x)
		57453: 178, // $default (0x)
		57344: 179, // error (0x)
	}

	yySymNames = []string{
		"';'",
		"$end",
		"')'",
		"','",
		"'('",
		"offset",
		"'+'",
		"'-'",
		"'^'",
		"limit",
		"order",
		"identifier",
		"where",
		"group",
		"oror",
		"from",
		"asc",
		"desc",
		"']'",
		"as",
		"':'",
		"andand",
		"'|'",
		"not",
		"between",
		"in",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"is",
		"le",
		"like",
		"neq",
		"bigIntType",
		"bigRatType",
		"blobType",
		"boolType",
		"byteType",
		"complex128Type",
		"complex64Type",
		"durationType",
		"float32Type",
		"float64Type",
		"floatType",
		"int16Type",
		"int32Type",
		"int64Type",
		"int8Type",
		"intType",
		"null",
		"runeType",
		"stringType",
		"timeType",
		"uint16Type",
		"uint32Type",
		"uint64Type",
		"uint8Type",
		"uintType",
		"falseKwd",
		"floatLit",
		"imaginaryLit",
		"intLit",
		"qlParam",
		"stringLit",
		"trueKwd",
		"Type",
		"'*'",
		"Conversion",
		"Literal",
		"Operand",
		"PrimaryExpression",
		"QualifiedIdent",
		"and",
		"'!'",
		"'%'",
		"'&'",
		"'/'",
		"andnot",
		"lsh",
		"rsh",
		"UnaryExpr",
		"PrimaryTerm",
		"PrimaryFactor",
		"'['",
		"Factor",
		"Factor1",
		"Term",
		"Expression",
		"ColumnName",
		"TableName",
		"selectKwd",
		"ExpressionList",
		"Call",
		"Index",
		"Slice",
		"ColumnDef",
		"drop",
		"exists",
		"ifKwd",
		"index",
		"SelectStmt",
		"tableKwd",
		"values",
		"WhereClause",
		"'='",
		"add",
		"alter",
		"AlterTableStmt",
		"Assignment",
		"begin",
		"BeginTransactionStmt",
		"by",
		"ColumnNameList",
		"commit",
		"CommitStmt",
		"create",
		"CreateIndexStmt",
		"CreateTableStmt",
		"CreateTableStmt1",
		"CreateTableStmt2",
		"DeleteFromStmt",
		"deleteKwd",
		"DropIndexStmt",
		"DropTableStmt",
		"EmptyStmt",
		"Field",
		"GroupByClause",
		"insert",
		"InsertIntoStmt",
		"OrderBy",
		"RecordSet",
		"RecordSet1",
		"rollback",
		"RollbackStmt",
		"SelectStmtGroup",
		"SelectStmtLimit",
		"SelectStmtOffset",
		"SelectStmtOrder",
		"SelectStmtWhere",
		"set",
		"Statement",
		"truncate",
		"TruncateTableStmt",
		"update",
		"UpdateStmt",
		"'.'",
		"AssignmentList",
		"AssignmentList1",
		"AssignmentList2",
		"Call1",
		"column",
		"ColumnNameList1",
		"ColumnNameList2",
		"CreateIndexIfNotExists",
		"CreateIndexStmtUnique",
		"distinct",
		"DropIndexIfExists",
		"ExpressionList1",
		"ExpressionList2",
		"Field1",
		"FieldList",
		"InsertIntoStmt1",
		"InsertIntoStmt2",
		"InsertIntoStmt3",
		"into",
		"on",
		"OrderBy1",
		"oSet",
		"RecordSet11",
		"RecordSet2",
		"RecordSetList",
		"SelectStmtDistinct",
		"SelectStmtFieldList",
		"StatementList",
		"transaction",
		"unique",
		"UpdateStmt1",
		"$default",
		"error",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {108, 5},
		2:   {108, 6},
		3:   {109, 3},
		4:   {147, 3},
		5:   {148, 0},
		6:   {148, 3},
		7:   {149, 0},
		8:   {149, 1},
		9:   {111, 2},
		10:  {93, 3},
		11:  {150, 0},
		12:  {150, 1},
		13:  {96, 2},
		14:  {89, 1},
		15:  {113, 3},
		16:  {152, 0},
		17:  {152, 3},
		18:  {153, 0},
		19:  {153, 1},
		20:  {115, 1},
		21:  {68, 4},
		22:  {117, 10},
		23:  {117, 12},
		24:  {154, 0},
		25:  {154, 3},
		26:  {155, 0},
		27:  {155, 1},
		28:  {118, 8},
		29:  {118, 11},
		30:  {119, 0},
		31:  {119, 3},
		32:  {120, 0},
		33:  {120, 1},
		34:  {121, 3},
		35:  {121, 4},
		36:  {123, 4},
		37:  {157, 0},
		38:  {157, 2},
		39:  {124, 3},
		40:  {124, 5},
		41:  {125, 0},
		42:  {88, 1},
		43:  {88, 3},
		44:  {92, 3},
		45:  {158, 0},
		46:  {158, 3},
		47:  {159, 0},
		48:  {159, 1},
		49:  {85, 1},
		50:  {85, 5},
		51:  {85, 6},
		52:  {85, 5},
		53:  {85, 6},
		54:  {85, 3},
		55:  {85, 4},
		56:  {86, 1},
		57:  {86, 3},
		58:  {86, 3},
		59:  {86, 3},
		60:  {86, 3},
		61:  {86, 3},
		62:  {86, 3},
		63:  {86, 3},
		64:  {126, 2},
		65:  {160, 0},
		66:  {160, 2},
		67:  {161, 1},
		68:  {161, 3},
		69:  {127, 3},
		70:  {94, 3},
		71:  {129, 10},
		72:  {129, 5},
		73:  {162, 0},
		74:  {162, 3},
		75:  {163, 0},
		76:  {163, 5},
		77:  {164, 0},
		78:  {164, 1},
		79:  {69, 1},
		80:  {69, 1},
		81:  {69, 1},
		82:  {69, 1},
		83:  {69, 1},
		84:  {69, 1},
		85:  {69, 1},
		86:  {70, 1},
		87:  {70, 1},
		88:  {70, 1},
		89:  {70, 3},
		90:  {130, 4},
		91:  {167, 0},
		92:  {167, 1},
		93:  {167, 1},
		94:  {71, 1},
		95:  {71, 1},
		96:  {71, 2},
		97:  {71, 2},
		98:  {71, 2},
		99:  {83, 1},
		100: {83, 3},
		101: {83, 3},
		102: {83, 3},
		103: {83, 3},
		104: {82, 1},
		105: {82, 3},
		106: {82, 3},
		107: {82, 3},
		108: {82, 3},
		109: {82, 3},
		110: {82, 3},
		111: {82, 3},
		112: {72, 1},
		113: {72, 3},
		114: {131, 2},
		115: {132, 1},
		116: {132, 4},
		117: {169, 0},
		118: {169, 1},
		119: {170, 0},
		120: {170, 2},
		121: {171, 1},
		122: {171, 3},
		123: {134, 1},
		124: {101, 10},
		125: {101, 11},
		126: {136, 0},
		127: {136, 2},
		128: {137, 0},
		129: {137, 2},
		130: {172, 0},
		131: {172, 1},
		132: {173, 1},
		133: {173, 1},
		134: {173, 2},
		135: {139, 0},
		136: {139, 1},
		137: {135, 0},
		138: {135, 1},
		139: {138, 0},
		140: {138, 1},
		141: {95, 3},
		142: {95, 4},
		143: {95, 4},
		144: {95, 5},
		145: {141, 1},
		146: {141, 1},
		147: {141, 1},
		148: {141, 1},
		149: {141, 1},
		150: {141, 1},
		151: {141, 1},
		152: {141, 1},
		153: {141, 1},
		154: {141, 1},
		155: {141, 1},
		156: {141, 1},
		157: {141, 1},
		158: {141, 1},
		159: {174, 1},
		160: {174, 3},
		161: {90, 1},
		162: {87, 1},
		163: {87, 3},
		164: {143, 3},
		165: {66, 1},
		166: {66, 1},
		167: {66, 1},
		168: {66, 1},
		169: {66, 1},
		170: {66, 1},
		171: {66, 1},
		172: {66, 1},
		173: {66, 1},
		174: {66, 1},
		175: {66, 1},
		176: {66, 1},
		177: {66, 1},
		178: {66, 1},
		179: {66, 1},
		180: {66, 1},
		181: {66, 1},
		182: {66, 1},
		183: {66, 1},
		184: {66, 1},
		185: {66, 1},
		186: {66, 1},
		187: {66, 1},
		188: {66, 1},
		189: {145, 5},
		190: {177, 0},
		191: {177, 1},
		192: {81, 1},
		193: {81, 2},
		194: {81, 2},
		195: {81, 2},
		196: {81, 2},
		197: {104, 2},
		198: {168, 0},
		199: {168, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [327][]uint16{
		// 0
		{159, 159, 91: 210, 97: 207, 101: 222, 107: 202, 212, 110: 203, 213, 114: 204, 214, 205, 215, 216, 121: 217, 206, 218, 219, 211, 128: 208, 220, 133: 209, 221, 141: 225, 226, 223, 227, 224, 174: 201},
		{525, 200},
		{102: 518},
		{175: 517},
		{180, 180},
		// 5
		{100: 174, 102: 483, 155: 481, 176: 482},
		{15: 478},
		{100: 468, 102: 469},
		{165: 451},
		{77, 77},
		// 10
		{4: 70, 6: 70, 70, 70, 11: 70, 34: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 67: 70, 74: 70, 156: 394, 172: 393},
		{55, 55},
		{54, 54},
		{53, 53},
		{52, 52},
		// 15
		{51, 51},
		{50, 50},
		{49, 49},
		{48, 48},
		{47, 47},
		// 20
		{46, 46},
		{45, 45},
		{44, 44},
		{43, 43},
		{42, 42},
		// 25
		{41, 41},
		{102: 391},
		{11: 228, 90: 229},
		{39, 39, 4: 39, 11: 39, 39, 91: 39, 97: 39, 103: 39, 106: 39, 140: 39},
		{11: 2, 140: 231, 168: 230},
		// 30
		{11: 234, 89: 232, 109: 233, 147: 235},
		{11: 1},
		{105: 389},
		{195, 195, 3: 195, 12: 195, 148: 385},
		{186, 186, 186, 186, 5: 186, 9: 186, 186, 34: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 51: 186, 186, 186, 186, 186, 186, 186, 186, 105: 186},
		// 35
		{10, 10, 12: 238, 104: 237, 177: 236},
		{11, 11},
		{9, 9},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 241},
		{4: 382},
		// 40
		{158, 158, 158, 158, 5: 158, 9: 158, 158, 12: 158, 158, 158, 158, 158, 158, 158, 158, 158, 303},
		{3, 3, 3, 5: 3, 9: 3, 3, 13: 3, 300},
		{151, 151, 151, 151, 5: 151, 9: 151, 151, 12: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 23: 348, 349, 347, 354, 352, 356, 351, 350, 353, 357, 355},
		{144, 144, 144, 144, 5: 144, 342, 341, 339, 144, 144, 12: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 340, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 67: 121, 73: 121, 75: 121, 121, 121, 121, 121, 121, 84: 121},
		// 45
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 67: 120, 73: 120, 75: 120, 120, 120, 120, 120, 120, 84: 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 67: 119, 73: 119, 75: 119, 119, 119, 119, 119, 119, 84: 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 67: 118, 73: 118, 75: 118, 118, 118, 118, 118, 118, 84: 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 67: 117, 73: 117, 75: 117, 117, 117, 117, 117, 117, 84: 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 67: 116, 73: 116, 75: 116, 116, 116, 116, 116, 116, 84: 116},
		// 50
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 67: 115, 73: 115, 75: 115, 115, 115, 115, 115, 115, 84: 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 67: 114, 73: 114, 75: 114, 114, 114, 114, 114, 114, 84: 114},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 67: 113, 73: 113, 75: 113, 113, 113, 113, 113, 113, 84: 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 67: 112, 73: 112, 75: 112, 112, 112, 112, 112, 112, 84: 112},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 337},
		// 55
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 67: 106, 73: 106, 75: 106, 106, 106, 106, 106, 106, 84: 106},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 67: 105, 73: 105, 75: 105, 105, 105, 105, 105, 105, 84: 105},
		{8, 8, 8, 8, 291, 8, 8, 8, 8, 8, 8, 12: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 67: 8, 73: 8, 75: 8, 8, 8, 8, 8, 8, 84: 292, 93: 295, 293, 294},
		{101, 101, 101, 101, 5: 101, 101, 101, 101, 101, 101, 12: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 67: 329, 73: 101, 75: 327, 324, 328, 323, 325, 326},
		{96, 96, 96, 96, 5: 96, 96, 96, 96, 96, 96, 12: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 67: 96, 73: 96, 75: 96, 96, 96, 96, 96, 96},
		// 60
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 67: 88, 73: 88, 75: 88, 88, 88, 88, 88, 88, 84: 88, 146: 321},
		{38, 38, 38, 38, 5: 38, 9: 38, 38, 12: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33},
		// 65
		{32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28},
		// 70
		{27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23},
		// 75
		{22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18},
		// 80
		{17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13},
		// 85
		{12, 12, 12, 12, 12},
		{4: 254, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 320, 253},
		{4: 254, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 319, 253},
		{4: 254, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 318, 253},
		{4: 254, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 290, 253},
		// 90
		{4, 4, 4, 4, 291, 4, 4, 4, 4, 4, 4, 12: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 67: 4, 73: 4, 75: 4, 4, 4, 4, 4, 4, 84: 292, 93: 295, 293, 294},
		{2: 189, 4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 311, 150: 310},
		{4: 254, 6: 289, 288, 286, 11: 260, 20: 297, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 296},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 67: 104, 73: 104, 75: 104, 104, 104, 104, 104, 104, 84: 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 67: 103, 73: 103, 75: 103, 103, 103, 103, 103, 103, 84: 103},
		// 95
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67: 102, 73: 102, 75: 102, 102, 102, 102, 102, 102, 84: 102},
		{14: 300, 18: 305, 20: 306},
		{4: 254, 6: 289, 288, 286, 11: 260, 18: 299, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 298},
		{14: 300, 18: 301},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 12: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 67: 59, 73: 59, 75: 59, 59, 59, 59, 59, 59, 84: 59},
		// 100
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 302},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 12: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 67: 58, 73: 58, 75: 58, 58, 58, 58, 58, 58, 84: 58},
		{157, 157, 157, 157, 5: 157, 9: 157, 157, 12: 157, 157, 157, 157, 157, 157, 157, 157, 157, 303},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 304, 242},
		{37, 37, 37, 37, 5: 37, 9: 37, 37, 12: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 105
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 12: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 67: 130, 73: 130, 75: 130, 130, 130, 130, 130, 130, 84: 130},
		{4: 254, 6: 289, 288, 286, 11: 260, 18: 308, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 307},
		{14: 300, 18: 309},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 12: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 67: 57, 73: 57, 75: 57, 57, 57, 57, 57, 57, 84: 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 12: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 67: 56, 73: 56, 75: 56, 56, 56, 56, 56, 56, 84: 56},
		// 110
		{2: 317},
		{2: 188},
		{155, 155, 155, 155, 5: 155, 9: 155, 14: 300, 16: 155, 155, 158: 313},
		{153, 153, 153, 315, 5: 153, 9: 153, 16: 153, 153, 159: 314},
		{156, 156, 156, 5: 156, 9: 156, 16: 156, 156},
		// 115
		{152, 152, 152, 4: 254, 152, 289, 288, 286, 152, 11: 260, 16: 152, 152, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 316},
		{154, 154, 154, 154, 5: 154, 9: 154, 14: 300, 16: 154, 154},
		{190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 12: 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 67: 190, 73: 190, 75: 190, 190, 190, 190, 190, 190, 84: 190},
		{5, 5, 5, 5, 291, 5, 5, 5, 5, 5, 5, 12: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 67: 5, 73: 5, 75: 5, 5, 5, 5, 5, 5, 84: 292, 93: 295, 293, 294},
		{6, 6, 6, 6, 291, 6, 6, 6, 6, 6, 6, 12: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 67: 6, 73: 6, 75: 6, 6, 6, 6, 6, 6, 84: 292, 93: 295, 293, 294},
		// 120
		{7, 7, 7, 7, 291, 7, 7, 7, 7, 7, 7, 12: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 67: 7, 73: 7, 75: 7, 7, 7, 7, 7, 7, 84: 292, 93: 295, 293, 294},
		{11: 322},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 67: 87, 73: 87, 75: 87, 87, 87, 87, 87, 87, 84: 87},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 336},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 335},
		// 125
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 334},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 333},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 332},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 331},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 330},
		// 130
		{89, 89, 89, 89, 5: 89, 89, 89, 89, 89, 89, 12: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 67: 89, 73: 89, 75: 89, 89, 89, 89, 89, 89},
		{90, 90, 90, 90, 5: 90, 90, 90, 90, 90, 90, 12: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 67: 90, 73: 90, 75: 90, 90, 90, 90, 90, 90},
		{91, 91, 91, 91, 5: 91, 91, 91, 91, 91, 91, 12: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 67: 91, 73: 91, 75: 91, 91, 91, 91, 91, 91},
		{92, 92, 92, 92, 5: 92, 92, 92, 92, 92, 92, 12: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 67: 92, 73: 92, 75: 92, 92, 92, 92, 92, 92},
		{93, 93, 93, 93, 5: 93, 93, 93, 93, 93, 93, 12: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 67: 93, 73: 93, 75: 93, 93, 93, 93, 93, 93},
		// 135
		{94, 94, 94, 94, 5: 94, 94, 94, 94, 94, 94, 12: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 67: 94, 73: 94, 75: 94, 94, 94, 94, 94, 94},
		{95, 95, 95, 95, 5: 95, 95, 95, 95, 95, 95, 12: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 67: 95, 73: 95, 75: 95, 95, 95, 95, 95, 95},
		{2: 338, 14: 300},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 67: 111, 73: 111, 75: 111, 111, 111, 111, 111, 111, 84: 111},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 346},
		// 140
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 345},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 344},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 343},
		{97, 97, 97, 97, 5: 97, 97, 97, 97, 97, 97, 12: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 67: 329, 73: 97, 75: 327, 324, 328, 323, 325, 326},
		{98, 98, 98, 98, 5: 98, 98, 98, 98, 98, 98, 12: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 67: 329, 73: 98, 75: 327, 324, 328, 323, 325, 326},
		// 145
		{99, 99, 99, 99, 5: 99, 99, 99, 99, 99, 99, 12: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 67: 329, 73: 99, 75: 327, 324, 328, 323, 325, 326},
		{100, 100, 100, 100, 5: 100, 100, 100, 100, 100, 100, 12: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 67: 329, 73: 100, 75: 327, 324, 328, 323, 325, 326},
		{4: 379},
		{24: 372, 371},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 368},
		// 150
		{23: 366, 50: 365},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 364},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 363},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 362},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 361},
		// 155
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 360},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 359},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 358},
		{137, 137, 137, 137, 5: 137, 342, 341, 339, 137, 137, 12: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 340, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{138, 138, 138, 138, 5: 138, 342, 341, 339, 138, 138, 12: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 340, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138},
		// 160
		{139, 139, 139, 139, 5: 139, 342, 341, 339, 139, 139, 12: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 340, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139},
		{140, 140, 140, 140, 5: 140, 342, 341, 339, 140, 140, 12: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 340, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140},
		{141, 141, 141, 141, 5: 141, 342, 341, 339, 141, 141, 12: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 340, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141},
		{142, 142, 142, 142, 5: 142, 342, 341, 339, 142, 142, 12: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 340, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{143, 143, 143, 143, 5: 143, 342, 341, 339, 143, 143, 12: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 340, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		// 165
		{146, 146, 146, 146, 5: 146, 9: 146, 146, 12: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146},
		{50: 367},
		{145, 145, 145, 145, 5: 145, 9: 145, 145, 12: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145},
		{6: 342, 341, 339, 22: 340, 73: 369},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 370},
		// 170
		{148, 148, 148, 148, 5: 148, 342, 341, 339, 148, 148, 12: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 340},
		{4: 376},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 373},
		{6: 342, 341, 339, 22: 340, 73: 374},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 375},
		// 175
		{147, 147, 147, 147, 5: 147, 342, 341, 339, 147, 147, 12: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 340},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 377},
		{2: 378},
		{149, 149, 149, 149, 5: 149, 9: 149, 149, 12: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 380},
		// 180
		{2: 381},
		{150, 150, 150, 150, 5: 150, 9: 150, 150, 12: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 383},
		{2: 384, 14: 300},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 12: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 67: 179, 73: 179, 75: 179, 179, 179, 179, 179, 179, 84: 179},
		// 185
		{193, 193, 3: 387, 12: 193, 149: 386},
		{196, 196, 12: 196},
		{192, 192, 11: 234, 192, 89: 232, 109: 388},
		{194, 194, 3: 194, 12: 194},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 390},
		// 190
		{197, 197, 3: 197, 12: 197, 14: 300},
		{11: 228, 90: 392},
		{36, 36},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 399, 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 395, 126: 396, 161: 397, 173: 398},
		{4: 69, 6: 69, 69, 69, 11: 69, 34: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 67: 69, 74: 69},
		// 195
		{3: 135, 14: 300, 135, 19: 449, 160: 448},
		{3: 133, 15: 133},
		{3: 446, 15: 67},
		{15: 400},
		{15: 68},
		// 200
		{4: 403, 11: 402, 131: 404, 401, 171: 405},
		{81, 81, 81, 81, 5: 81, 9: 81, 81, 12: 81, 81, 19: 444, 170: 443},
		{85, 85, 85, 85, 5: 85, 9: 85, 85, 12: 85, 85, 19: 85},
		{91: 210, 101: 439},
		{79, 79, 79, 79, 5: 79, 9: 79, 79, 12: 79, 79},
		// 205
		{65, 65, 65, 406, 5: 65, 9: 65, 65, 12: 238, 65, 104: 408, 139: 407},
		{65, 65, 65, 4: 403, 65, 9: 65, 65, 402, 238, 65, 104: 408, 131: 433, 401, 139: 434},
		{63, 63, 63, 5: 63, 9: 63, 63, 13: 409, 127: 411, 135: 410},
		{64, 64, 64, 5: 64, 9: 64, 64, 13: 64},
		{112: 426},
		// 210
		{61, 61, 61, 5: 61, 9: 61, 412, 130: 414, 138: 413},
		{62, 62, 62, 5: 62, 9: 62, 62},
		{112: 421},
		{74, 74, 74, 5: 74, 9: 416, 136: 415},
		{60, 60, 60, 5: 60, 9: 60},
		// 215
		{72, 72, 72, 5: 419, 137: 418},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 417},
		{73, 73, 73, 5: 73, 14: 300},
		{76, 76, 76},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 420},
		// 220
		{71, 71, 71, 14: 300},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 422},
		{109, 109, 109, 5: 109, 9: 109, 16: 424, 425, 167: 423},
		{110, 110, 110, 5: 110, 9: 110},
		{108, 108, 108, 5: 108, 9: 108},
		// 225
		{107, 107, 107, 5: 107, 9: 107},
		{11: 234, 89: 427, 113: 428},
		{184, 184, 184, 184, 5: 184, 9: 184, 184, 152: 429},
		{131, 131, 131, 5: 131, 9: 131, 131},
		{182, 182, 182, 431, 5: 182, 9: 182, 182, 153: 430},
		// 230
		{185, 185, 185, 5: 185, 9: 185, 185},
		{181, 181, 181, 5: 181, 9: 181, 181, 234, 89: 432},
		{183, 183, 183, 183, 5: 183, 9: 183, 183},
		{78, 78, 78, 78, 5: 78, 9: 78, 78, 12: 78, 78},
		{63, 63, 63, 5: 63, 9: 63, 63, 13: 409, 127: 411, 135: 435},
		// 235
		{61, 61, 61, 5: 61, 9: 61, 412, 130: 414, 138: 436},
		{74, 74, 74, 5: 74, 9: 416, 136: 437},
		{72, 72, 72, 5: 419, 137: 438},
		{75, 75, 75},
		{441, 2: 83, 169: 440},
		// 240
		{2: 442},
		{2: 82},
		{84, 84, 84, 84, 5: 84, 9: 84, 84, 12: 84, 84, 19: 84},
		{86, 86, 86, 86, 5: 86, 9: 86, 86, 12: 86, 86},
		{11: 445},
		// 245
		{80, 80, 80, 80, 5: 80, 9: 80, 80, 12: 80, 80},
		{4: 254, 6: 289, 288, 286, 11: 260, 15: 66, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 395, 126: 447},
		{3: 132, 15: 132},
		{3: 136, 15: 136},
		{11: 450},
		// 250
		{3: 134, 15: 134},
		{11: 228, 90: 452},
		{4: 454, 91: 127, 103: 127, 162: 453},
		{91: 210, 101: 458, 103: 457},
		{11: 234, 89: 427, 113: 455},
		// 255
		{2: 456},
		{91: 126, 103: 126},
		{4: 459},
		{128, 128},
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 460},
		// 260
		{2: 461},
		{125, 125, 3: 125, 163: 462},
		{123, 123, 3: 464, 164: 463},
		{129, 129},
		{122, 122, 4: 465},
		// 265
		{4: 254, 6: 289, 288, 286, 11: 260, 34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 245, 278, 279, 280, 282, 283, 284, 285, 281, 244, 247, 248, 249, 252, 250, 246, 239, 68: 256, 251, 255, 257, 253, 74: 287, 81: 259, 258, 243, 85: 261, 242, 240, 312, 92: 466},
		{2: 467},
		{124, 124, 3: 124},
		{11: 163, 99: 475, 157: 474},
		{11: 228, 90: 470, 99: 471},
		// 270
		{161, 161},
		{98: 472},
		{11: 228, 90: 473},
		{160, 160},
		{11: 477},
		// 275
		{98: 476},
		{11: 162},
		{164, 164},
		{11: 228, 90: 479},
		{166, 166, 12: 238, 104: 480},
		// 280
		{165, 165},
		{100: 503},
		{100: 173},
		{11: 228, 90: 484, 99: 485},
		{4: 498},
		// 285
		{23: 486},
		{98: 487},
		{11: 228, 90: 488},
		{4: 489},
		{11: 234, 89: 490, 96: 491},
		// 290
		{34: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 270, 274, 275, 276, 277, 273, 51: 278, 279, 280, 282, 283, 284, 285, 281, 66: 497},
		{2: 170, 170, 119: 492},
		{2: 168, 494, 120: 493},
		{2: 496},
		{2: 167, 11: 234, 89: 490, 96: 495},
		// 295
		{2: 169, 169},
		{171, 171},
		{187, 187, 187, 187},
		{11: 234, 89: 490, 96: 499},
		{2: 170, 170, 119: 500},
		// 300
		{2: 168, 494, 120: 501},
		{2: 502},
		{172, 172},
		{11: 176, 99: 505, 154: 504},
		{11: 508},
		// 305
		{23: 506},
		{98: 507},
		{11: 175},
		{166: 509},
		{11: 510},
		// 310
		{4: 511},
		{11: 512},
		{2: 513, 4: 514},
		{178, 178},
		{2: 515},
		// 315
		{2: 516},
		{177, 177},
		{191, 191},
		{11: 228, 90: 519},
		{97: 521, 106: 520},
		// 320
		{11: 234, 89: 490, 96: 524},
		{151: 522},
		{11: 234, 89: 523},
		{198, 198},
		{199, 199},
		// 325
		{159, 159, 91: 210, 97: 207, 101: 222, 107: 202, 212, 110: 203, 213, 114: 204, 214, 205, 215, 216, 121: 217, 206, 218, 219, 211, 128: 208, 220, 133: 209, 221, 141: 526, 226, 223, 227, 224},
		{40, 40},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

func yySymName(c int) (s string) {
	if c >= 0 && c < len(yySymNames) {
		return yySymNames[c]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(lex yyLexer, lval *yySymType) (n int) {
	n = lex.Lex(lval)
	if n <= 0 {
		n = -1
	}
	m := yyXLAT[n]
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%#x->%d), lval %+v\n\n", yySymName(m), n, m, lval)
	}
	return m
}

func yyParse(yylex yyLexer) int {
	const yyError = 179
	const yyEOFCode = 1

	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("\tyyerrok()\n\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	if yyDebug >= 4 {
		if yyDebug >= 5 {
			var a []int
			for _, v := range yyS[:yyp+1] {
				a = append(a, v.yys)
			}
			__yyfmt__.Printf("state %d, lookahead %s, state stack %v\n", yystate, yySymName(yychar), a)
		} else {
			__yyfmt__.Printf("state %d, lookahead %s\n", yystate, yySymName(yychar))
		}
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yychar < len(row) {
		if yyn = int(row[yychar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("\tshift, and goto state %d\n\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("\tno action for %s\n", yySymName(yychar))
			}
			k := yyXError{yystate, yychar}
			msg, ok := yyXErrors[k]
			if !ok {
				k.xsym = -1
				msg, ok = yyXErrors[k]
			}
			if !ok {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn != 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("\terror recovery found error shift in state %d\n\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("\terror recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("\terror recovery failed\n\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("\terror recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("\treduce using rule %v (%s), and goto state %d\n\n", r, yySymName(x), yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.item = &alterTableAddStmt{tableName: yyS[yypt-2].item.(string), c: yyS[yypt-0].item.(*col)}
		}
	case 2:
		{
			yyVAL.item = &alterTableDropColumnStmt{tableName: yyS[yypt-3].item.(string), colName: yyS[yypt-0].item.(string)}
		}
	case 3:
		{
			yyVAL.item = assignment{colName: yyS[yypt-2].item.(string), expr: yyS[yypt-0].item.(expression)}
		}
	case 4:
		{
			yyVAL.item = append([]assignment{yyS[yypt-2].item.(assignment)}, yyS[yypt-1].item.([]assignment)...)
		}
	case 5:
		{
			yyVAL.item = []assignment{}
		}
	case 6:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]assignment), yyS[yypt-0].item.(assignment))
		}
	case 9:
		{
			yyVAL.item = beginTransactionStmt{}
		}
	case 10:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 11:
		{
			yyVAL.item = []expression{}
		}
	case 13:
		{
			yyVAL.item = &col{name: yyS[yypt-1].item.(string), typ: yyS[yypt-0].item.(int)}
		}
	case 15:
		{
			yyVAL.item = append([]string{yyS[yypt-2].item.(string)}, yyS[yypt-1].item.([]string)...)
		}
	case 16:
		{
			yyVAL.item = []string{}
		}
	case 17:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].item.(string))
		}
	case 20:
		{
			yyVAL.item = commitStmt{}
		}
	case 21:
		{
			yyVAL.item = &conversion{typ: yyS[yypt-3].item.(int), val: yyS[yypt-1].item.(expression)}
		}
	case 22:
		{
			indexName, tableName, columnName := yyS[yypt-5].item.(string), yyS[yypt-3].item.(string), yyS[yypt-1].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-8].item.(bool), ifNotExists: yyS[yypt-6].item.(bool), indexName: indexName, tableName: tableName, colName: columnName}
			if indexName == tableName || indexName == columnName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 23:
		{
			indexName, tableName, columnName := yyS[yypt-7].item.(string), yyS[yypt-5].item.(string), yyS[yypt-3].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-10].item.(bool), ifNotExists: yyS[yypt-8].item.(bool), indexName: indexName, tableName: tableName, colName: "id()"}
			if yyS[yypt-3].item.(string) != "id" {
				yylex.(*lexer).err("only the built-in function id() can be used in index: %s()", columnName)
				return 1
			}

			if indexName == tableName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 24:
		{
			yyVAL.item = false
		}
	case 25:
		{
			yyVAL.item = true
		}
	case 26:
		{
			yyVAL.item = false
		}
	case 27:
		{
			yyVAL.item = true
		}
	case 28:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 29:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{ifNotExists: true, tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 30:
		{
			yyVAL.item = []*col{}
		}
	case 31:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*col), yyS[yypt-0].item.(*col))
		}
	case 34:
		{
			yyVAL.item = &truncateTableStmt{yyS[yypt-0].item.(string)}
		}
	case 35:
		{
			yyVAL.item = &deleteStmt{tableName: yyS[yypt-1].item.(string), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 36:
		{
			yyVAL.item = &dropIndexStmt{ifExists: yyS[yypt-1].item.(bool), indexName: yyS[yypt-0].item.(string)}
		}
	case 37:
		{
			yyVAL.item = false
		}
	case 38:
		{
			yyVAL.item = true
		}
	case 39:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 40:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{ifExists: true, tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 41:
		{
			yyVAL.item = nil
		}
	case 43:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(oror, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 44:
		{
			yyVAL.item = append([]expression{yyS[yypt-2].item.(expression)}, yyS[yypt-1].item.([]expression)...)
		}
	case 45:
		{
			yyVAL.item = []expression(nil)
		}
	case 46:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]expression), yyS[yypt-0].item.(expression))
		}
	case 50:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-4].item.(expression), list: yyS[yypt-1].item.([]expression)}
		}
	case 51:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-5].item.(expression), not: true, list: yyS[yypt-1].item.([]expression)}
		}
	case 52:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-4].item, yyS[yypt-2].item, yyS[yypt-0].item, false); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 53:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-5].item, yyS[yypt-2].item, yyS[yypt-0].item, true); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 54:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-2].item.(expression)}
		}
	case 55:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-3].item.(expression), not: true}
		}
	case 57:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(ge, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 58:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('>', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 59:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(le, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 60:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('<', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 61:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(neq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 62:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(eq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 63:
		{
			yyVAL.item = &pLike{expr: yyS[yypt-2].item.(expression), pattern: yyS[yypt-0].item.(expression)}
		}
	case 64:
		{
			expr, name := yyS[yypt-1].item.(expression), yyS[yypt-0].item.(string)
			if name == "" {
				s, ok := expr.(*ident)
				if ok {
					name = s.s
				}
			}
			yyVAL.item = &fld{expr: expr, name: name}
		}
	case 65:
		{
			yyVAL.item = ""
		}
	case 66:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 67:
		{
			yyVAL.item = []*fld{yyS[yypt-0].item.(*fld)}
		}
	case 68:
		{
			l, f := yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld)
			if f.name != "" {
				if f := findFld(l, f.name); f != nil {
					yylex.(*lexer).err("duplicate field name %q", f.name)
					return 1
				}
			}

			yyVAL.item = append(yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld))
		}
	case 69:
		{
			yyVAL.item = &groupByRset{colNames: yyS[yypt-0].item.([]string)}
		}
	case 70:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 71:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-7].item.(string), colNames: yyS[yypt-6].item.([]string), lists: append([][]expression{yyS[yypt-3].item.([]expression)}, yyS[yypt-1].item.([][]expression)...)}
		}
	case 72:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-2].item.(string), colNames: yyS[yypt-1].item.([]string), sel: yyS[yypt-0].item.(*selectStmt)}
		}
	case 73:
		{
			yyVAL.item = []string{}
		}
	case 74:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 75:
		{
			yyVAL.item = [][]expression{}
		}
	case 76:
		{
			yyVAL.item = append(yyS[yypt-4].item.([][]expression), yyS[yypt-1].item.([]expression))
		}
	case 86:
		{
			yyVAL.item = value{yyS[yypt-0].item}
		}
	case 87:
		{
			n := yyS[yypt-0].item.(int)
			yyVAL.item = parameter{n}
			l := yylex.(*lexer)
			l.params = mathutil.Max(l.params, n)
			if n == 0 {
				l.err("parameter number must be non zero")
				return 1
			}
		}
	case 88:
		{
			yyVAL.item = &ident{yyS[yypt-0].item.(string)}
		}
	case 89:
		{
			yyVAL.item = &pexpr{expr: yyS[yypt-1].item.(expression)}
		}
	case 90:
		{
			yyVAL.item = &orderByRset{by: yyS[yypt-1].item.([]expression), asc: yyS[yypt-0].item.(bool)}
		}
	case 91:
		{
			yyVAL.item = true // ASC by default
		}
	case 92:
		{
			yyVAL.item = true
		}
	case 93:
		{
			yyVAL.item = false
		}
	case 96:
		{
			var err error
			if yyVAL.item, err = newIndex(yyS[yypt-1].item.(expression), yyS[yypt-0].item.(expression)); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 97:
		{
			var err error
			s := yyS[yypt-0].item.([2]*expression)
			if yyVAL.item, err = newSlice(yyS[yypt-1].item.(expression), s[0], s[1]); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 98:
		{
			x := yylex.(*lexer)
			f, ok := yyS[yypt-1].item.(*ident)
			if !ok {
				x.err("expected identifier or qualified identifier")
				return 1
			}

			var err error
			var agg bool
			if yyVAL.item, agg, err = newCall(f.s, yyS[yypt-0].item.([]expression)); err != nil {
				x.err("%v", err)
				return 1
			}
			if n := len(x.agg); n > 0 {
				x.agg[n-1] = x.agg[n-1] || agg
			}
		}
	case 100:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('^', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 101:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('|', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 102:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('-', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 103:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('+', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 105:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(andnot, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 106:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('&', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 107:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(lsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 108:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(rsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 109:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('%', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 110:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('/', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 111:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('*', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 113:
		{
			yyVAL.item = fmt.Sprintf("%s.%s", yyS[yypt-2].item.(string), yyS[yypt-0].item.(string))
		}
	case 114:
		{
			yyVAL.item = []interface{}{yyS[yypt-1].item, yyS[yypt-0].item}
		}
	case 116:
		{
			yyVAL.item = yyS[yypt-2].item
		}
	case 119:
		{
			yyVAL.item = ""
		}
	case 120:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 121:
		{
			yyVAL.list = []interface{}{yyS[yypt-0].item}
		}
	case 122:
		{
			yyVAL.list = append(yyS[yypt-2].list, yyS[yypt-0].item)
		}
	case 123:
		{
			yyVAL.item = rollbackStmt{}
		}
	case 124:
		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-8].item.(bool),
				flds:          yyS[yypt-7].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-5].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 125:
		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-9].item.(bool),
				flds:          yyS[yypt-8].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-6].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 126:
		{
			yyVAL.item = (*limitRset)(nil)
		}
	case 127:
		{
			yyVAL.item = &limitRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 128:
		{
			yyVAL.item = (*offsetRset)(nil)
		}
	case 129:
		{
			yyVAL.item = &offsetRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 130:
		{
			yyVAL.item = false
		}
	case 131:
		{
			yyVAL.item = true
		}
	case 132:
		{
			yyVAL.item = []*fld{}
		}
	case 133:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 134:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 135:
		{
			yyVAL.item = (*whereRset)(nil)
		}
	case 137:
		{
			yyVAL.item = (*groupByRset)(nil)
		}
	case 139:
		{
			yyVAL.item = (*orderByRset)(nil)
		}
	case 141:
		{
			yyVAL.item = [2]*expression{nil, nil}
		}
	case 142:
		{
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{nil, &hi}
		}
	case 143:
		{
			lo := yyS[yypt-2].item.(expression)
			yyVAL.item = [2]*expression{&lo, nil}
		}
	case 144:
		{
			lo := yyS[yypt-3].item.(expression)
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{&lo, &hi}
		}
	case 159:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = []stmt{yyS[yypt-0].item.(stmt)}
			}
		}
	case 160:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = append(yylex.(*lexer).list, yyS[yypt-0].item.(stmt))
			}
		}
	case 163:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(andand, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 164:
		{
			yyVAL.item = &truncateTableStmt{tableName: yyS[yypt-0].item.(string)}
		}
	case 189:
		{
			yyVAL.item = &updateStmt{tableName: yyS[yypt-3].item.(string), list: yyS[yypt-1].item.([]assignment), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 190:
		{
			yyVAL.item = nowhere
		}
	case 193:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('^', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 194:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('!', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 195:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('-', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 196:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('+', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 197:
		{
			yyVAL.item = &whereRset{expr: yyS[yypt-0].item.(expression)}
		}

	}

	goto yystack /* stack new state and value */
}
