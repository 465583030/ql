// Copyright (c) 2014 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Inital yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ goyacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package ql

import __yyfmt__ "fmt"

import (
	"fmt"

	"github.com/cznic/mathutil"
)

type yySymType struct {
	yys  int
	line int
	col  int
	item interface{}
	list []interface{}
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault      = 57435
	yyEOFCode      = 57344
	add            = 57346
	alter          = 57347
	and            = 57348
	andand         = 57349
	andnot         = 57350
	as             = 57351
	asc            = 57352
	begin          = 57353
	between        = 57354
	bigIntType     = 57355
	bigRatType     = 57356
	blobType       = 57357
	boolType       = 57358
	by             = 57359
	byteType       = 57360
	column         = 57361
	commit         = 57362
	complex128Type = 57363
	complex64Type  = 57364
	create         = 57365
	defaultKwd     = 57366
	deleteKwd      = 57367
	desc           = 57368
	distinct       = 57369
	drop           = 57370
	durationType   = 57371
	eq             = 57372
	yyErrCode      = 57345
	exists         = 57373
	falseKwd       = 57374
	float32Type    = 57376
	float64Type    = 57377
	floatLit       = 57378
	floatType      = 57375
	from           = 57379
	full           = 57433
	ge             = 57380
	group          = 57381
	identifier     = 57382
	ifKwd          = 57383
	imaginaryLit   = 57384
	in             = 57385
	index          = 57386
	insert         = 57387
	int16Type      = 57389
	int32Type      = 57390
	int64Type      = 57391
	int8Type       = 57392
	intLit         = 57394
	intType        = 57388
	into           = 57393
	is             = 57395
	join           = 57396
	le             = 57397
	left           = 57431
	like           = 57398
	limit          = 57399
	lsh            = 57400
	neq            = 57401
	not            = 57402
	null           = 57403
	offset         = 57404
	on             = 57405
	or             = 57406
	order          = 57407
	oror           = 57408
	outer          = 57434
	qlParam        = 57409
	right          = 57432
	rollback       = 57410
	rsh            = 57411
	runeType       = 57412
	selectKwd      = 57413
	set            = 57414
	stringLit      = 57416
	stringType     = 57415
	tableKwd       = 57417
	timeType       = 57418
	transaction    = 57419
	trueKwd        = 57420
	truncate       = 57421
	uint16Type     = 57423
	uint32Type     = 57424
	uint64Type     = 57425
	uint8Type      = 57426
	uintType       = 57422
	unique         = 57427
	update         = 57428
	values         = 57429
	where          = 57430

	yyMaxDepth = 200
	yyTabOfs   = -212
)

var (
	yyXLAT = map[int]int{
		59:    0,   // ';' (189x)
		57344: 1,   // $end (186x)
		41:    2,   // ')' (164x)
		43:    3,   // '+' (130x)
		45:    4,   // '-' (130x)
		94:    5,   // '^' (130x)
		44:    6,   // ',' (129x)
		40:    7,   // '(' (122x)
		57382: 8,   // identifier (114x)
		57404: 9,   // offset (102x)
		57399: 10,  // limit (100x)
		57366: 11,  // defaultKwd (93x)
		57407: 12,  // order (89x)
		57430: 13,  // where (86x)
		57403: 14,  // null (82x)
		57355: 15,  // bigIntType (81x)
		57356: 16,  // bigRatType (81x)
		57357: 17,  // blobType (81x)
		57358: 18,  // boolType (81x)
		57360: 19,  // byteType (81x)
		57363: 20,  // complex128Type (81x)
		57364: 21,  // complex64Type (81x)
		57371: 22,  // durationType (81x)
		57376: 23,  // float32Type (81x)
		57377: 24,  // float64Type (81x)
		57375: 25,  // floatType (81x)
		57389: 26,  // int16Type (81x)
		57390: 27,  // int32Type (81x)
		57391: 28,  // int64Type (81x)
		57392: 29,  // int8Type (81x)
		57388: 30,  // intType (81x)
		57412: 31,  // runeType (81x)
		57415: 32,  // stringType (81x)
		57418: 33,  // timeType (81x)
		57423: 34,  // uint16Type (81x)
		57424: 35,  // uint32Type (81x)
		57425: 36,  // uint64Type (81x)
		57426: 37,  // uint8Type (81x)
		57422: 38,  // uintType (81x)
		57381: 39,  // group (80x)
		57402: 40,  // not (80x)
		57374: 41,  // falseKwd (79x)
		57378: 42,  // floatLit (79x)
		57384: 43,  // imaginaryLit (79x)
		57394: 44,  // intLit (79x)
		57406: 45,  // or (79x)
		57408: 46,  // oror (79x)
		57409: 47,  // qlParam (79x)
		57416: 48,  // stringLit (79x)
		57420: 49,  // trueKwd (79x)
		33:    50,  // '!' (75x)
		57379: 51,  // from (74x)
		57352: 52,  // asc (70x)
		57368: 53,  // desc (70x)
		93:    54,  // ']' (69x)
		57351: 55,  // as (68x)
		58:    56,  // ':' (66x)
		57348: 57,  // and (66x)
		57349: 58,  // andand (64x)
		124:   59,  // '|' (55x)
		57354: 60,  // between (53x)
		57385: 61,  // in (53x)
		60:    62,  // '<' (52x)
		62:    63,  // '>' (52x)
		57372: 64,  // eq (52x)
		57380: 65,  // ge (52x)
		57395: 66,  // is (52x)
		57397: 67,  // le (52x)
		57398: 68,  // like (52x)
		57401: 69,  // neq (52x)
		57509: 70,  // Type (50x)
		57451: 71,  // Conversion (49x)
		57480: 72,  // Literal (49x)
		57481: 73,  // Operand (49x)
		57485: 74,  // PrimaryExpression (49x)
		57488: 75,  // QualifiedIdent (49x)
		42:    76,  // '*' (46x)
		57510: 77,  // UnaryExpr (45x)
		37:    78,  // '%' (43x)
		38:    79,  // '&' (43x)
		47:    80,  // '/' (43x)
		57350: 81,  // andnot (43x)
		57400: 82,  // lsh (43x)
		57411: 83,  // rsh (43x)
		57487: 84,  // PrimaryTerm (38x)
		57486: 85,  // PrimaryFactor (34x)
		91:    86,  // '[' (30x)
		57467: 87,  // Factor (23x)
		57468: 88,  // Factor1 (23x)
		57507: 89,  // Term (22x)
		57464: 90,  // Expression (21x)
		57515: 91,  // logOr (15x)
		57444: 92,  // ColumnName (10x)
		57433: 93,  // full (10x)
		57431: 94,  // left (10x)
		57432: 95,  // right (10x)
		57413: 96,  // selectKwd (9x)
		57506: 97,  // TableName (9x)
		57447: 98,  // CommaOpt (7x)
		57405: 99,  // on (7x)
		57465: 100, // ExpressionList (6x)
		57494: 101, // SelectStmt (6x)
		57441: 102, // Call (5x)
		57473: 103, // Index (5x)
		57503: 104, // Slice (5x)
		57443: 105, // ColumnDef (4x)
		57370: 106, // drop (4x)
		57373: 107, // exists (4x)
		57383: 108, // ifKwd (4x)
		57386: 109, // index (4x)
		57434: 110, // outer (4x)
		57417: 111, // tableKwd (4x)
		57429: 112, // values (4x)
		57516: 113, // semiOpt (3x)
		57513: 114, // WhereClause (3x)
		61:    115, // '=' (2x)
		57346: 116, // add (2x)
		57347: 117, // alter (2x)
		57436: 118, // AlterTableStmt (2x)
		57437: 119, // Assignment (2x)
		57353: 120, // begin (2x)
		57440: 121, // BeginTransactionStmt (2x)
		57359: 122, // by (2x)
		57445: 123, // ColumnNameList (2x)
		57362: 124, // commit (2x)
		57448: 125, // CommitStmt (2x)
		57365: 126, // create (2x)
		57453: 127, // CreateIndexStmt (2x)
		57455: 128, // CreateTableStmt (2x)
		57456: 129, // CreateTableStmt1 (2x)
		57459: 130, // DeleteFromStmt (2x)
		57367: 131, // deleteKwd (2x)
		57461: 132, // DropIndexStmt (2x)
		57462: 133, // DropTableStmt (2x)
		57463: 134, // EmptyStmt (2x)
		57469: 135, // Field (2x)
		57387: 136, // insert (2x)
		57474: 137, // InsertIntoStmt (2x)
		57514: 138, // logAnd (2x)
		57489: 139, // RecordSet (2x)
		57490: 140, // RecordSet1 (2x)
		57410: 141, // rollback (2x)
		57493: 142, // RollbackStmt (2x)
		57414: 143, // set (2x)
		57504: 144, // Statement (2x)
		57421: 145, // truncate (2x)
		57508: 146, // TruncateTableStmt (2x)
		57428: 147, // update (2x)
		57511: 148, // UpdateStmt (2x)
		46:    149, // '.' (1x)
		57438: 150, // AssignmentList (1x)
		57439: 151, // AssignmentList1 (1x)
		57442: 152, // Call1 (1x)
		57361: 153, // column (1x)
		57446: 154, // ColumnNameList1 (1x)
		57449: 155, // Constraint (1x)
		57450: 156, // ConstraintOpt (1x)
		57452: 157, // CreateIndexIfNotExists (1x)
		57454: 158, // CreateIndexStmtUnique (1x)
		57457: 159, // Default (1x)
		57458: 160, // DefaultOpt (1x)
		57369: 161, // distinct (1x)
		57460: 162, // DropIndexIfExists (1x)
		57466: 163, // ExpressionList1 (1x)
		57470: 164, // Field1 (1x)
		57471: 165, // FieldList (1x)
		57472: 166, // GroupByClause (1x)
		57475: 167, // InsertIntoStmt1 (1x)
		57476: 168, // InsertIntoStmt2 (1x)
		57393: 169, // into (1x)
		57477: 170, // JoinClause (1x)
		57478: 171, // JoinClauseOpt (1x)
		57479: 172, // JoinType (1x)
		57482: 173, // OrderBy (1x)
		57483: 174, // OrderBy1 (1x)
		57484: 175, // OuterOpt (1x)
		57491: 176, // RecordSet2 (1x)
		57492: 177, // RecordSetList (1x)
		57495: 178, // SelectStmtDistinct (1x)
		57496: 179, // SelectStmtFieldList (1x)
		57497: 180, // SelectStmtGroup (1x)
		57498: 181, // SelectStmtLimit (1x)
		57499: 182, // SelectStmtOffset (1x)
		57500: 183, // SelectStmtOrder (1x)
		57501: 184, // SelectStmtWhere (1x)
		57502: 185, // SetOpt (1x)
		57505: 186, // StatementList (1x)
		57419: 187, // transaction (1x)
		57427: 188, // unique (1x)
		57512: 189, // UpdateStmt1 (1x)
		57435: 190, // $default (0x)
		57345: 191, // error (0x)
		57396: 192, // join (0x)
	}

	yySymNames = []string{
		"';'",
		"$end",
		"')'",
		"'+'",
		"'-'",
		"'^'",
		"','",
		"'('",
		"identifier",
		"offset",
		"limit",
		"defaultKwd",
		"order",
		"where",
		"null",
		"bigIntType",
		"bigRatType",
		"blobType",
		"boolType",
		"byteType",
		"complex128Type",
		"complex64Type",
		"durationType",
		"float32Type",
		"float64Type",
		"floatType",
		"int16Type",
		"int32Type",
		"int64Type",
		"int8Type",
		"intType",
		"runeType",
		"stringType",
		"timeType",
		"uint16Type",
		"uint32Type",
		"uint64Type",
		"uint8Type",
		"uintType",
		"group",
		"not",
		"falseKwd",
		"floatLit",
		"imaginaryLit",
		"intLit",
		"or",
		"oror",
		"qlParam",
		"stringLit",
		"trueKwd",
		"'!'",
		"from",
		"asc",
		"desc",
		"']'",
		"as",
		"':'",
		"and",
		"andand",
		"'|'",
		"between",
		"in",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"is",
		"le",
		"like",
		"neq",
		"Type",
		"Conversion",
		"Literal",
		"Operand",
		"PrimaryExpression",
		"QualifiedIdent",
		"'*'",
		"UnaryExpr",
		"'%'",
		"'&'",
		"'/'",
		"andnot",
		"lsh",
		"rsh",
		"PrimaryTerm",
		"PrimaryFactor",
		"'['",
		"Factor",
		"Factor1",
		"Term",
		"Expression",
		"logOr",
		"ColumnName",
		"full",
		"left",
		"right",
		"selectKwd",
		"TableName",
		"CommaOpt",
		"on",
		"ExpressionList",
		"SelectStmt",
		"Call",
		"Index",
		"Slice",
		"ColumnDef",
		"drop",
		"exists",
		"ifKwd",
		"index",
		"outer",
		"tableKwd",
		"values",
		"semiOpt",
		"WhereClause",
		"'='",
		"add",
		"alter",
		"AlterTableStmt",
		"Assignment",
		"begin",
		"BeginTransactionStmt",
		"by",
		"ColumnNameList",
		"commit",
		"CommitStmt",
		"create",
		"CreateIndexStmt",
		"CreateTableStmt",
		"CreateTableStmt1",
		"DeleteFromStmt",
		"deleteKwd",
		"DropIndexStmt",
		"DropTableStmt",
		"EmptyStmt",
		"Field",
		"insert",
		"InsertIntoStmt",
		"logAnd",
		"RecordSet",
		"RecordSet1",
		"rollback",
		"RollbackStmt",
		"set",
		"Statement",
		"truncate",
		"TruncateTableStmt",
		"update",
		"UpdateStmt",
		"'.'",
		"AssignmentList",
		"AssignmentList1",
		"Call1",
		"column",
		"ColumnNameList1",
		"Constraint",
		"ConstraintOpt",
		"CreateIndexIfNotExists",
		"CreateIndexStmtUnique",
		"Default",
		"DefaultOpt",
		"distinct",
		"DropIndexIfExists",
		"ExpressionList1",
		"Field1",
		"FieldList",
		"GroupByClause",
		"InsertIntoStmt1",
		"InsertIntoStmt2",
		"into",
		"JoinClause",
		"JoinClauseOpt",
		"JoinType",
		"OrderBy",
		"OrderBy1",
		"OuterOpt",
		"RecordSet2",
		"RecordSetList",
		"SelectStmtDistinct",
		"SelectStmtFieldList",
		"SelectStmtGroup",
		"SelectStmtLimit",
		"SelectStmtOffset",
		"SelectStmtOrder",
		"SelectStmtWhere",
		"SetOpt",
		"StatementList",
		"transaction",
		"unique",
		"UpdateStmt1",
		"$default",
		"error",
		"join",
	}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {118, 5},
		2:   {118, 6},
		3:   {119, 3},
		4:   {150, 3},
		5:   {151, 0},
		6:   {151, 3},
		7:   {121, 2},
		8:   {102, 3},
		9:   {152, 0},
		10:  {152, 1},
		11:  {105, 4},
		12:  {92, 1},
		13:  {123, 3},
		14:  {154, 0},
		15:  {154, 3},
		16:  {125, 1},
		17:  {155, 2},
		18:  {155, 1},
		19:  {156, 0},
		20:  {156, 1},
		21:  {71, 4},
		22:  {127, 10},
		23:  {127, 12},
		24:  {157, 0},
		25:  {157, 3},
		26:  {158, 0},
		27:  {158, 1},
		28:  {128, 8},
		29:  {128, 11},
		30:  {129, 0},
		31:  {129, 3},
		32:  {159, 2},
		33:  {160, 0},
		34:  {160, 1},
		35:  {130, 3},
		36:  {130, 4},
		37:  {132, 4},
		38:  {162, 0},
		39:  {162, 2},
		40:  {133, 3},
		41:  {133, 5},
		42:  {134, 0},
		43:  {90, 1},
		44:  {90, 3},
		45:  {91, 1},
		46:  {91, 1},
		47:  {100, 3},
		48:  {163, 0},
		49:  {163, 3},
		50:  {87, 1},
		51:  {87, 5},
		52:  {87, 6},
		53:  {87, 6},
		54:  {87, 7},
		55:  {87, 5},
		56:  {87, 6},
		57:  {87, 3},
		58:  {87, 4},
		59:  {88, 1},
		60:  {88, 3},
		61:  {88, 3},
		62:  {88, 3},
		63:  {88, 3},
		64:  {88, 3},
		65:  {88, 3},
		66:  {88, 3},
		67:  {135, 2},
		68:  {164, 0},
		69:  {164, 2},
		70:  {165, 1},
		71:  {165, 3},
		72:  {166, 3},
		73:  {103, 3},
		74:  {137, 10},
		75:  {137, 5},
		76:  {167, 0},
		77:  {167, 3},
		78:  {168, 0},
		79:  {168, 5},
		80:  {72, 1},
		81:  {72, 1},
		82:  {72, 1},
		83:  {72, 1},
		84:  {72, 1},
		85:  {72, 1},
		86:  {72, 1},
		87:  {73, 1},
		88:  {73, 1},
		89:  {73, 1},
		90:  {73, 3},
		91:  {173, 4},
		92:  {174, 0},
		93:  {174, 1},
		94:  {174, 1},
		95:  {74, 1},
		96:  {74, 1},
		97:  {74, 2},
		98:  {74, 2},
		99:  {74, 2},
		100: {85, 1},
		101: {85, 3},
		102: {85, 3},
		103: {85, 3},
		104: {85, 3},
		105: {84, 1},
		106: {84, 3},
		107: {84, 3},
		108: {84, 3},
		109: {84, 3},
		110: {84, 3},
		111: {84, 3},
		112: {84, 3},
		113: {75, 1},
		114: {75, 3},
		115: {139, 2},
		116: {140, 1},
		117: {140, 4},
		118: {113, 0},
		119: {113, 1},
		120: {176, 0},
		121: {176, 2},
		122: {177, 1},
		123: {177, 3},
		124: {142, 1},
		125: {172, 1},
		126: {172, 1},
		127: {172, 1},
		128: {175, 0},
		129: {175, 1},
		130: {170, 4},
		131: {171, 0},
		132: {171, 1},
		133: {101, 12},
		134: {181, 0},
		135: {181, 2},
		136: {182, 0},
		137: {182, 2},
		138: {178, 0},
		139: {178, 1},
		140: {179, 1},
		141: {179, 1},
		142: {179, 2},
		143: {184, 0},
		144: {184, 1},
		145: {180, 0},
		146: {180, 1},
		147: {183, 0},
		148: {183, 1},
		149: {104, 3},
		150: {104, 4},
		151: {104, 4},
		152: {104, 5},
		153: {144, 1},
		154: {144, 1},
		155: {144, 1},
		156: {144, 1},
		157: {144, 1},
		158: {144, 1},
		159: {144, 1},
		160: {144, 1},
		161: {144, 1},
		162: {144, 1},
		163: {144, 1},
		164: {144, 1},
		165: {144, 1},
		166: {144, 1},
		167: {186, 1},
		168: {186, 3},
		169: {97, 1},
		170: {89, 1},
		171: {89, 3},
		172: {138, 1},
		173: {138, 1},
		174: {146, 3},
		175: {70, 1},
		176: {70, 1},
		177: {70, 1},
		178: {70, 1},
		179: {70, 1},
		180: {70, 1},
		181: {70, 1},
		182: {70, 1},
		183: {70, 1},
		184: {70, 1},
		185: {70, 1},
		186: {70, 1},
		187: {70, 1},
		188: {70, 1},
		189: {70, 1},
		190: {70, 1},
		191: {70, 1},
		192: {70, 1},
		193: {70, 1},
		194: {70, 1},
		195: {70, 1},
		196: {70, 1},
		197: {70, 1},
		198: {70, 1},
		199: {148, 5},
		200: {189, 0},
		201: {189, 1},
		202: {77, 1},
		203: {77, 2},
		204: {77, 2},
		205: {77, 2},
		206: {77, 2},
		207: {114, 2},
		208: {185, 0},
		209: {185, 1},
		210: {98, 0},
		211: {98, 1},
	}

	yyXErrors = map[yyXError]string{
		yyXError{39, -1}:  "expected '('",
		yyXError{151, -1}: "expected '('",
		yyXError{175, -1}: "expected '('",
		yyXError{273, -1}: "expected '('",
		yyXError{300, -1}: "expected '('",
		yyXError{304, -1}: "expected '('",
		yyXError{335, -1}: "expected '('",
		yyXError{114, -1}: "expected ')'",
		yyXError{115, -1}: "expected ')'",
		yyXError{181, -1}: "expected ')'",
		yyXError{183, -1}: "expected ')'",
		yyXError{184, -1}: "expected ')'",
		yyXError{188, -1}: "expected ')'",
		yyXError{190, -1}: "expected ')'",
		yyXError{257, -1}: "expected ')'",
		yyXError{271, -1}: "expected ')'",
		yyXError{276, -1}: "expected ')'",
		yyXError{282, -1}: "expected ')'",
		yyXError{309, -1}: "expected ')'",
		yyXError{326, -1}: "expected ')'",
		yyXError{339, -1}: "expected ')'",
		yyXError{340, -1}: "expected ')'",
		yyXError{32, -1}:  "expected '='",
		yyXError{198, -1}: "expected Assignment or one of [$end ';' identifier where]",
		yyXError{29, -1}:  "expected AssignmentList or SetOpt or one of [identifier set]",
		yyXError{30, -1}:  "expected AssignmentList or identifier",
		yyXError{33, -1}:  "expected AssignmentList1 or CommaOpt or one of [$end ',' ';' where]",
		yyXError{57, -1}:  "expected Call or Index or Slice or one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{90, -1}:  "expected Call or Index or Slice or one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{122, -1}: "expected Call or Index or Slice or one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{123, -1}: "expected Call or Index or Slice or one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{124, -1}: "expected Call or Index or Slice or one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{91, -1}:  "expected Call1 or one of ['!' '(' ')' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{305, -1}: "expected ColumnDef or identifier",
		yyXError{323, -1}: "expected ColumnDef or identifier",
		yyXError{345, -1}: "expected ColumnDef or identifier",
		yyXError{310, -1}: "expected ColumnDef or one of [')' identifier]",
		yyXError{347, -1}: "expected ColumnName or identifier",
		yyXError{249, -1}: "expected ColumnName or one of [$end ')' ';' identifier limit offset order]",
		yyXError{244, -1}: "expected ColumnNameList or identifier",
		yyXError{270, -1}: "expected ColumnNameList or identifier",
		yyXError{245, -1}: "expected ColumnNameList1 or CommaOpt or one of [$end ')' ',' ';' limit offset order]",
		yyXError{307, -1}: "expected CommaOpt or CreateTableStmt1 or one of [')' ',']",
		yyXError{324, -1}: "expected CommaOpt or CreateTableStmt1 or one of [')' ',']",
		yyXError{116, -1}: "expected CommaOpt or ExpressionList1 or logOr or one of [$end ')' ',' ';' asc desc limit offset or oror]",
		yyXError{277, -1}: "expected CommaOpt or InsertIntoStmt2 or one of [$end ',' ';']",
		yyXError{216, -1}: "expected CommaOpt or JoinClauseOpt or SelectStmtGroup or SelectStmtLimit or SelectStmtOffset or SelectStmtOrder or SelectStmtWhere or one of [$end ')' ',' ';' full group left limit offset order right where]",
		yyXError{117, -1}: "expected CommaOpt or one of [$end ')' ',' ';' asc desc limit offset]",
		yyXError{247, -1}: "expected CommaOpt or one of [$end ')' ',' ';' limit offset order]",
		yyXError{196, -1}: "expected CommaOpt or one of [$end ',' ';' where]",
		yyXError{278, -1}: "expected CommaOpt or one of [$end ',' ';']",
		yyXError{308, -1}: "expected CommaOpt or one of [')' ',']",
		yyXError{325, -1}: "expected CommaOpt or one of [')' ',']",
		yyXError{313, -1}: "expected ConstraintOpt or DefaultOpt or one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{328, -1}: "expected CreateIndexIfNotExists or one of [identifier ifKwd]",
		yyXError{5, -1}:   "expected CreateIndexStmtUnique or one of [index tableKwd unique]",
		yyXError{314, -1}: "expected DefaultOpt or one of [$end ')' ',' ';' defaultKwd]",
		yyXError{284, -1}: "expected DropIndexIfExists or one of [identifier ifKwd]",
		yyXError{119, -1}: "expected Expression or one of [$end '!' '(' ')' '+' '-' ';' '^' asc bigIntType bigRatType blobType boolType byteType complex128Type complex64Type desc durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType limit null offset qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{92, -1}:  "expected Expression or one of ['!' '(' '+' '-' ':' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{97, -1}:  "expected Expression or one of ['!' '(' '+' '-' ']' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{110, -1}: "expected Expression or one of ['!' '(' '+' '-' ']' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{38, -1}:  "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{54, -1}:  "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{193, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{200, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{234, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{237, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{253, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{320, -1}: "expected Expression or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{180, -1}: "expected ExpressionList or SelectStmt or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType selectKwd stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{187, -1}: "expected ExpressionList or SelectStmt or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType selectKwd stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{239, -1}: "expected ExpressionList or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{275, -1}: "expected ExpressionList or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{281, -1}: "expected ExpressionList or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{105, -1}: "expected Factor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{262, -1}: "expected Field or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType from identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{206, -1}: "expected Field1 or logOr or one of [',' as from or oror]",
		yyXError{268, -1}: "expected InsertIntoStmt1 or SelectStmt or one of ['(' selectKwd values]",
		yyXError{218, -1}: "expected JoinClauseOpt or SelectStmtGroup or SelectStmtLimit or SelectStmtOffset or SelectStmtOrder or SelectStmtWhere or one of [$end ')' ';' full group left limit offset order right where]",
		yyXError{240, -1}: "expected OrderBy1 or one of [$end ')' ';' asc desc limit offset]",
		yyXError{222, -1}: "expected OuterOpt or one of [on outer]",
		yyXError{86, -1}:  "expected PrimaryExpression or one of ['(' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{87, -1}:  "expected PrimaryExpression or one of ['(' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{88, -1}:  "expected PrimaryExpression or one of ['(' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{89, -1}:  "expected PrimaryExpression or one of ['(' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{153, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{155, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{156, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{157, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{158, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{159, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{160, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{161, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{173, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{176, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{178, -1}: "expected PrimaryFactor or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{143, -1}: "expected PrimaryTerm or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{144, -1}: "expected PrimaryTerm or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{145, -1}: "expected PrimaryTerm or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{146, -1}: "expected PrimaryTerm or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{217, -1}: "expected RecordSet or one of [$end '(' ')' ';' full group identifier left limit offset order right where]",
		yyXError{212, -1}: "expected RecordSet2 or one of [$end ')' ',' ';' as full group left limit offset order right where]",
		yyXError{211, -1}: "expected RecordSetList or one of ['(' identifier]",
		yyXError{269, -1}: "expected SelectStmt or one of [selectKwd values]",
		yyXError{214, -1}: "expected SelectStmt or selectKwd",
		yyXError{10, -1}:  "expected SelectStmtDistinct or SelectStmtFieldList or one of ['!' '(' '*' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type distinct durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{204, -1}: "expected SelectStmtFieldList or one of ['!' '(' '*' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{224, -1}: "expected SelectStmtGroup or SelectStmtLimit or SelectStmtOffset or SelectStmtOrder or SelectStmtWhere or one of [$end ')' ';' group limit offset order where]",
		yyXError{225, -1}: "expected SelectStmtGroup or SelectStmtLimit or SelectStmtOffset or SelectStmtOrder or one of [$end ')' ';' group limit offset order]",
		yyXError{228, -1}: "expected SelectStmtLimit or SelectStmtOffset or SelectStmtOrder or one of [$end ')' ';' limit offset order]",
		yyXError{231, -1}: "expected SelectStmtLimit or SelectStmtOffset or one of [$end ')' ';' limit offset]",
		yyXError{233, -1}: "expected SelectStmtOffset or one of [$end ')' ';' offset]",
		yyXError{350, -1}: "expected Statement or one of [$end ';' alter begin commit create deleteKwd drop insert rollback selectKwd truncate update]",
		yyXError{0, -1}:   "expected StatementList or one of [$end ';' alter begin commit create deleteKwd drop insert rollback selectKwd truncate update]",
		yyXError{27, -1}:  "expected TableName or identifier",
		yyXError{202, -1}: "expected TableName or identifier",
		yyXError{267, -1}: "expected TableName or identifier",
		yyXError{288, -1}: "expected TableName or identifier",
		yyXError{294, -1}: "expected TableName or identifier",
		yyXError{303, -1}: "expected TableName or identifier",
		yyXError{343, -1}: "expected TableName or identifier",
		yyXError{285, -1}: "expected TableName or one of [identifier ifKwd]",
		yyXError{299, -1}: "expected TableName or one of [identifier ifKwd]",
		yyXError{100, -1}: "expected Term or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{306, -1}: "expected Type or one of [bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType float32Type float64Type floatType int16Type int32Type int64Type int8Type intType runeType stringType timeType uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{127, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{128, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{129, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{130, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{131, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{132, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{133, -1}: "expected UnaryExpr or one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{35, -1}:  "expected UpdateStmt1 or one of [$end ';' where]",
		yyXError{295, -1}: "expected WhereClause or one of [$end ';' where]",
		yyXError{227, -1}: "expected by",
		yyXError{230, -1}: "expected by",
		yyXError{346, -1}: "expected column",
		yyXError{287, -1}: "expected exists",
		yyXError{291, -1}: "expected exists",
		yyXError{302, -1}: "expected exists",
		yyXError{331, -1}: "expected exists",
		yyXError{6, -1}:   "expected from",
		yyXError{209, -1}: "expected from",
		yyXError{210, -1}: "expected from",
		yyXError{31, -1}:  "expected identifier",
		yyXError{125, -1}: "expected identifier",
		yyXError{260, -1}: "expected identifier",
		yyXError{265, -1}: "expected identifier",
		yyXError{290, -1}: "expected identifier",
		yyXError{292, -1}: "expected identifier",
		yyXError{329, -1}: "expected identifier",
		yyXError{332, -1}: "expected identifier",
		yyXError{334, -1}: "expected identifier",
		yyXError{336, -1}: "expected identifier",
		yyXError{297, -1}: "expected index",
		yyXError{298, -1}: "expected index",
		yyXError{8, -1}:   "expected into",
		yyXError{40, -1}:  "expected logAnd or one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{104, -1}: "expected logAnd or one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{120, -1}: "expected logOr or one of [$end ')' ',' ';' asc desc limit offset or oror]",
		yyXError{316, -1}: "expected logOr or one of [$end ')' ',' ';' defaultKwd or oror]",
		yyXError{322, -1}: "expected logOr or one of [$end ')' ',' ';' or oror]",
		yyXError{254, -1}: "expected logOr or one of [$end ')' ';' group limit offset or order oror where]",
		yyXError{41, -1}:  "expected logOr or one of [$end ')' ';' group limit offset or order oror]",
		yyXError{235, -1}: "expected logOr or one of [$end ')' ';' offset or oror]",
		yyXError{238, -1}: "expected logOr or one of [$end ')' ';' or oror]",
		yyXError{201, -1}: "expected logOr or one of [$end ',' ';' or oror where]",
		yyXError{141, -1}: "expected logOr or one of [')' or oror]",
		yyXError{194, -1}: "expected logOr or one of [')' or oror]",
		yyXError{96, -1}:  "expected logOr or one of [':' ']' or oror]",
		yyXError{98, -1}:  "expected logOr or one of [']' or oror]",
		yyXError{111, -1}: "expected logOr or one of [']' or oror]",
		yyXError{301, -1}: "expected not",
		yyXError{330, -1}: "expected not",
		yyXError{170, -1}: "expected null",
		yyXError{315, -1}: "expected null",
		yyXError{251, -1}: "expected on",
		yyXError{252, -1}: "expected on",
		yyXError{333, -1}: "expected on",
		yyXError{62, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{63, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{64, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{65, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{66, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{67, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{68, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{69, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{70, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{71, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{72, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{73, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{74, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{75, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{76, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{77, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{78, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{79, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{80, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{81, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{82, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{83, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{84, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{85, -1}:  "expected one of [$end '!' '(' ')' '+' ',' '-' ';' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type defaultKwd durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType not null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{60, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{44, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{45, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{46, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{47, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{48, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{49, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{50, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{51, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{52, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{53, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{55, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{56, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{93, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{94, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{95, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{99, -1}:  "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{103, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{109, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{112, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{113, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{121, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{126, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{142, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{195, -1}: "expected one of [$end '%' '&' '(' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' '[' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{58, -1}:  "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{59, -1}:  "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{134, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{135, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{136, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{137, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{138, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{139, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{140, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{147, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{148, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{149, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{150, -1}: "expected one of [$end '%' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '>' ']' '^' '|' and andand andnot as asc between defaultKwd desc eq from ge group in is le like limit lsh neq not offset or order oror rsh where]",
		yyXError{28, -1}:  "expected one of [$end '(' ';' add drop identifier selectKwd set values where]",
		yyXError{280, -1}: "expected one of [$end '(' ';']",
		yyXError{43, -1}:  "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{162, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{163, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{164, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{165, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{166, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{167, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{168, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' '<' '>' ']' '^' '|' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{174, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' ']' '^' '|' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{179, -1}: "expected one of [$end ')' '+' ',' '-' ':' ';' ']' '^' '|' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{42, -1}:  "expected one of [$end ')' ',' ':' ';' '<' '>' ']' and andand as asc between defaultKwd desc eq from ge group in is le like limit neq not offset or order oror where]",
		yyXError{61, -1}:  "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{108, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{169, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{171, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{185, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{186, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{191, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{192, -1}: "expected one of [$end ')' ',' ':' ';' ']' and andand as asc defaultKwd desc from group limit offset or order oror where]",
		yyXError{34, -1}:  "expected one of [$end ')' ',' ';' '=' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType float32Type float64Type floatType int16Type int32Type int64Type int8Type intType limit offset order runeType stringType timeType uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{213, -1}: "expected one of [$end ')' ',' ';' as full group left limit offset order right where]",
		yyXError{258, -1}: "expected one of [$end ')' ',' ';' as full group left limit offset order right where]",
		yyXError{317, -1}: "expected one of [$end ')' ',' ';' defaultKwd]",
		yyXError{318, -1}: "expected one of [$end ')' ',' ';' defaultKwd]",
		yyXError{215, -1}: "expected one of [$end ')' ',' ';' full group left limit offset order right where]",
		yyXError{255, -1}: "expected one of [$end ')' ',' ';' full group left limit offset order right where]",
		yyXError{259, -1}: "expected one of [$end ')' ',' ';' full group left limit offset order right where]",
		yyXError{261, -1}: "expected one of [$end ')' ',' ';' full group left limit offset order right where]",
		yyXError{250, -1}: "expected one of [$end ')' ',' ';' limit offset order]",
		yyXError{319, -1}: "expected one of [$end ')' ',' ';']",
		yyXError{321, -1}: "expected one of [$end ')' ',' ';']",
		yyXError{118, -1}: "expected one of [$end ')' ';' asc desc limit offset]",
		yyXError{223, -1}: "expected one of [$end ')' ';' group limit offset order where]",
		yyXError{226, -1}: "expected one of [$end ')' ';' group limit offset order]",
		yyXError{229, -1}: "expected one of [$end ')' ';' limit offset order]",
		yyXError{246, -1}: "expected one of [$end ')' ';' limit offset order]",
		yyXError{248, -1}: "expected one of [$end ')' ';' limit offset order]",
		yyXError{232, -1}: "expected one of [$end ')' ';' limit offset]",
		yyXError{241, -1}: "expected one of [$end ')' ';' limit offset]",
		yyXError{242, -1}: "expected one of [$end ')' ';' limit offset]",
		yyXError{243, -1}: "expected one of [$end ')' ';' limit offset]",
		yyXError{236, -1}: "expected one of [$end ')' ';']",
		yyXError{199, -1}: "expected one of [$end ',' ';' where]",
		yyXError{283, -1}: "expected one of [$end ',' ';']",
		yyXError{197, -1}: "expected one of [$end ';' where]",
		yyXError{1, -1}:   "expected one of [$end ';']",
		yyXError{4, -1}:   "expected one of [$end ';']",
		yyXError{9, -1}:   "expected one of [$end ';']",
		yyXError{11, -1}:  "expected one of [$end ';']",
		yyXError{12, -1}:  "expected one of [$end ';']",
		yyXError{13, -1}:  "expected one of [$end ';']",
		yyXError{14, -1}:  "expected one of [$end ';']",
		yyXError{15, -1}:  "expected one of [$end ';']",
		yyXError{16, -1}:  "expected one of [$end ';']",
		yyXError{17, -1}:  "expected one of [$end ';']",
		yyXError{18, -1}:  "expected one of [$end ';']",
		yyXError{19, -1}:  "expected one of [$end ';']",
		yyXError{20, -1}:  "expected one of [$end ';']",
		yyXError{21, -1}:  "expected one of [$end ';']",
		yyXError{22, -1}:  "expected one of [$end ';']",
		yyXError{23, -1}:  "expected one of [$end ';']",
		yyXError{24, -1}:  "expected one of [$end ';']",
		yyXError{25, -1}:  "expected one of [$end ';']",
		yyXError{36, -1}:  "expected one of [$end ';']",
		yyXError{37, -1}:  "expected one of [$end ';']",
		yyXError{203, -1}: "expected one of [$end ';']",
		yyXError{274, -1}: "expected one of [$end ';']",
		yyXError{279, -1}: "expected one of [$end ';']",
		yyXError{286, -1}: "expected one of [$end ';']",
		yyXError{289, -1}: "expected one of [$end ';']",
		yyXError{293, -1}: "expected one of [$end ';']",
		yyXError{296, -1}: "expected one of [$end ';']",
		yyXError{312, -1}: "expected one of [$end ';']",
		yyXError{327, -1}: "expected one of [$end ';']",
		yyXError{338, -1}: "expected one of [$end ';']",
		yyXError{341, -1}: "expected one of [$end ';']",
		yyXError{342, -1}: "expected one of [$end ';']",
		yyXError{348, -1}: "expected one of [$end ';']",
		yyXError{349, -1}: "expected one of [$end ';']",
		yyXError{351, -1}: "expected one of [$end ';']",
		yyXError{205, -1}: "expected one of ['!' '(' '*' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{101, -1}: "expected one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{102, -1}: "expected one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{106, -1}: "expected one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{107, -1}: "expected one of ['!' '(' '+' '-' '^' bigIntType bigRatType blobType boolType byteType complex128Type complex64Type durationType falseKwd float32Type float64Type floatLit floatType identifier imaginaryLit int16Type int32Type int64Type int8Type intLit intType null qlParam runeType stringLit stringType timeType trueKwd uint16Type uint32Type uint64Type uint8Type uintType]",
		yyXError{337, -1}: "expected one of ['(' ')']",
		yyXError{311, -1}: "expected one of [')' ',']",
		yyXError{172, -1}: "expected one of ['+' '-' '^' '|' and]",
		yyXError{177, -1}: "expected one of ['+' '-' '^' '|' and]",
		yyXError{207, -1}: "expected one of [',' from]",
		yyXError{208, -1}: "expected one of [',' from]",
		yyXError{263, -1}: "expected one of [',' from]",
		yyXError{264, -1}: "expected one of [',' from]",
		yyXError{266, -1}: "expected one of [',' from]",
		yyXError{344, -1}: "expected one of [add drop]",
		yyXError{152, -1}: "expected one of [between in]",
		yyXError{7, -1}:   "expected one of [index tableKwd]",
		yyXError{154, -1}: "expected one of [not null]",
		yyXError{219, -1}: "expected one of [on outer]",
		yyXError{220, -1}: "expected one of [on outer]",
		yyXError{221, -1}: "expected one of [on outer]",
		yyXError{272, -1}: "expected one of [selectKwd values]",
		yyXError{182, -1}: "expected semiOpt or one of [')' ';']",
		yyXError{189, -1}: "expected semiOpt or one of [')' ';']",
		yyXError{256, -1}: "expected semiOpt or one of [')' ';']",
		yyXError{2, -1}:   "expected tableKwd",
		yyXError{26, -1}:  "expected tableKwd",
		yyXError{3, -1}:   "expected transaction",
	}

	yyParseTab = [352][]uint16{
		// 0
		{170, 170, 96: 222, 101: 234, 106: 219, 117: 214, 224, 120: 215, 225, 124: 216, 226, 217, 227, 228, 130: 229, 218, 230, 231, 223, 136: 220, 232, 141: 221, 233, 144: 237, 238, 235, 239, 236, 186: 213},
		{562, 212},
		{111: 555},
		{187: 554},
		{196, 196},
		// 5
		{109: 186, 111: 511, 158: 509, 188: 510},
		{51: 506},
		{109: 496, 111: 497},
		{169: 479},
		{88, 88},
		// 10
		{3: 74, 74, 74, 7: 74, 74, 14: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 41: 74, 74, 74, 74, 47: 74, 74, 74, 74, 76: 74, 161: 417, 178: 416},
		{59, 59},
		{58, 58},
		{57, 57},
		{56, 56},
		// 15
		{55, 55},
		{54, 54},
		{53, 53},
		{52, 52},
		{51, 51},
		// 20
		{50, 50},
		{49, 49},
		{48, 48},
		{47, 47},
		{46, 46},
		// 25
		{45, 45},
		{111: 414},
		{8: 240, 97: 241},
		{43, 43, 7: 43, 43, 13: 43, 96: 43, 106: 43, 112: 43, 116: 43, 143: 43},
		{8: 4, 143: 243, 185: 242},
		// 30
		{8: 246, 92: 244, 119: 245, 150: 247},
		{8: 3},
		{115: 412},
		{207, 207, 6: 207, 13: 207, 151: 408},
		{200, 200, 200, 6: 200, 9: 200, 200, 12: 200, 15: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 115: 200},
		// 35
		{12, 12, 13: 250, 114: 249, 189: 248},
		{13, 13},
		{11, 11},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 253},
		{7: 405},
		// 40
		{169, 169, 169, 6: 169, 9: 169, 169, 169, 169, 169, 39: 169, 45: 169, 169, 51: 169, 169, 169, 169, 169, 169, 319, 318, 138: 317},
		{5, 5, 5, 9: 5, 5, 12: 5, 39: 5, 45: 314, 313, 91: 312},
		{162, 162, 162, 6: 162, 9: 162, 162, 162, 162, 162, 39: 162, 364, 45: 162, 162, 51: 162, 162, 162, 162, 162, 162, 162, 162, 60: 365, 363, 370, 368, 372, 367, 366, 369, 373, 371},
		{153, 153, 153, 358, 357, 355, 153, 9: 153, 153, 153, 153, 153, 39: 153, 153, 45: 153, 153, 51: 153, 153, 153, 153, 153, 153, 153, 153, 356, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153},
		{132, 132, 132, 132, 132, 132, 132, 132, 9: 132, 132, 132, 132, 132, 39: 132, 132, 45: 132, 132, 51: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 76: 132, 78: 132, 132, 132, 132, 132, 132, 86: 132},
		// 45
		{131, 131, 131, 131, 131, 131, 131, 131, 9: 131, 131, 131, 131, 131, 39: 131, 131, 45: 131, 131, 51: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 76: 131, 78: 131, 131, 131, 131, 131, 131, 86: 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 9: 130, 130, 130, 130, 130, 39: 130, 130, 45: 130, 130, 51: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 76: 130, 78: 130, 130, 130, 130, 130, 130, 86: 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 9: 129, 129, 129, 129, 129, 39: 129, 129, 45: 129, 129, 51: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 76: 129, 78: 129, 129, 129, 129, 129, 129, 86: 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 9: 128, 128, 128, 128, 128, 39: 128, 128, 45: 128, 128, 51: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 76: 128, 78: 128, 128, 128, 128, 128, 128, 86: 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 9: 127, 127, 127, 127, 127, 39: 127, 127, 45: 127, 127, 51: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 76: 127, 78: 127, 127, 127, 127, 127, 127, 86: 127},
		// 50
		{126, 126, 126, 126, 126, 126, 126, 126, 9: 126, 126, 126, 126, 126, 39: 126, 126, 45: 126, 126, 51: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 76: 126, 78: 126, 126, 126, 126, 126, 126, 86: 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 9: 125, 125, 125, 125, 125, 39: 125, 125, 45: 125, 125, 51: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 76: 125, 78: 125, 125, 125, 125, 125, 125, 86: 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 9: 124, 124, 124, 124, 124, 39: 124, 124, 45: 124, 124, 51: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 76: 124, 78: 124, 124, 124, 124, 124, 124, 86: 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 9: 123, 123, 123, 123, 123, 39: 123, 123, 45: 123, 123, 51: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 76: 123, 78: 123, 123, 123, 123, 123, 123, 86: 123},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 353},
		// 55
		{117, 117, 117, 117, 117, 117, 117, 117, 9: 117, 117, 117, 117, 117, 39: 117, 117, 45: 117, 117, 51: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 76: 117, 78: 117, 117, 117, 117, 117, 117, 86: 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 9: 116, 116, 116, 116, 116, 39: 116, 116, 45: 116, 116, 51: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 76: 116, 78: 116, 116, 116, 116, 116, 116, 86: 116},
		{10, 10, 10, 10, 10, 10, 10, 303, 9: 10, 10, 10, 10, 10, 39: 10, 10, 45: 10, 10, 51: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 76: 10, 78: 10, 10, 10, 10, 10, 10, 86: 304, 102: 307, 305, 306},
		{112, 112, 112, 112, 112, 112, 112, 9: 112, 112, 112, 112, 112, 39: 112, 112, 45: 112, 112, 51: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 76: 345, 78: 343, 340, 344, 339, 341, 342},
		{107, 107, 107, 107, 107, 107, 107, 9: 107, 107, 107, 107, 107, 39: 107, 107, 45: 107, 107, 51: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 76: 107, 78: 107, 107, 107, 107, 107, 107},
		// 60
		{99, 99, 99, 99, 99, 99, 99, 99, 9: 99, 99, 99, 99, 99, 39: 99, 99, 45: 99, 99, 51: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 76: 99, 78: 99, 99, 99, 99, 99, 99, 86: 99, 149: 337},
		{42, 42, 42, 6: 42, 9: 42, 42, 42, 42, 42, 39: 42, 45: 42, 42, 51: 42, 42, 42, 42, 42, 42, 42, 42},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 11: 37, 14: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 40: 37, 37, 37, 37, 37, 47: 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 11: 36, 14: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40: 36, 36, 36, 36, 36, 47: 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 11: 35, 14: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 40: 35, 35, 35, 35, 35, 47: 35, 35, 35, 35},
		// 65
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 11: 34, 14: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40: 34, 34, 34, 34, 34, 47: 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 11: 33, 14: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 40: 33, 33, 33, 33, 33, 47: 33, 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 11: 32, 14: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40: 32, 32, 32, 32, 32, 47: 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 11: 31, 14: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 40: 31, 31, 31, 31, 31, 47: 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 11: 30, 14: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40: 30, 30, 30, 30, 30, 47: 30, 30, 30, 30},
		// 70
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 11: 29, 14: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 40: 29, 29, 29, 29, 29, 47: 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 11: 28, 14: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 40: 28, 28, 28, 28, 28, 47: 28, 28, 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 11: 27, 14: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 40: 27, 27, 27, 27, 27, 47: 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 11: 26, 14: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 40: 26, 26, 26, 26, 26, 47: 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 11: 25, 14: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 40: 25, 25, 25, 25, 25, 47: 25, 25, 25, 25},
		// 75
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 11: 24, 14: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 40: 24, 24, 24, 24, 24, 47: 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 11: 23, 14: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 40: 23, 23, 23, 23, 23, 47: 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 11: 22, 14: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 40: 22, 22, 22, 22, 22, 47: 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 11: 21, 14: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 40: 21, 21, 21, 21, 21, 47: 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 11: 20, 14: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 40: 20, 20, 20, 20, 20, 47: 20, 20, 20, 20},
		// 80
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 11: 19, 14: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 40: 19, 19, 19, 19, 19, 47: 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 11: 18, 14: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 40: 18, 18, 18, 18, 18, 47: 18, 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 11: 17, 14: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 40: 17, 17, 17, 17, 17, 47: 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 11: 16, 14: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 40: 16, 16, 16, 16, 16, 47: 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 11: 15, 14: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 40: 15, 15, 15, 15, 15, 47: 15, 15, 15, 15},
		// 85
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 11: 14, 14: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 40: 14, 14, 14, 14, 14, 47: 14, 14, 14, 14},
		{7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 70: 251, 268, 263, 267, 336, 265},
		{7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 70: 251, 268, 263, 267, 335, 265},
		{7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 70: 251, 268, 263, 267, 334, 265},
		{7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 70: 251, 268, 263, 267, 302, 265},
		// 90
		{6, 6, 6, 6, 6, 6, 6, 303, 9: 6, 6, 6, 6, 6, 39: 6, 6, 45: 6, 6, 51: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 76: 6, 78: 6, 6, 6, 6, 6, 6, 86: 304, 102: 307, 305, 306},
		{2: 203, 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 100: 327, 152: 326},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 56: 309, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 308},
		{115, 115, 115, 115, 115, 115, 115, 115, 9: 115, 115, 115, 115, 115, 39: 115, 115, 45: 115, 115, 51: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 76: 115, 78: 115, 115, 115, 115, 115, 115, 86: 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 9: 114, 114, 114, 114, 114, 39: 114, 114, 45: 114, 114, 51: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 76: 114, 78: 114, 114, 114, 114, 114, 114, 86: 114},
		// 95
		{113, 113, 113, 113, 113, 113, 113, 113, 9: 113, 113, 113, 113, 113, 39: 113, 113, 45: 113, 113, 51: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 76: 113, 78: 113, 113, 113, 113, 113, 113, 86: 113},
		{45: 314, 313, 54: 321, 56: 322, 91: 312},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 54: 311, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 310},
		{45: 314, 313, 54: 315, 91: 312},
		{63, 63, 63, 63, 63, 63, 63, 63, 9: 63, 63, 63, 63, 63, 39: 63, 63, 45: 63, 63, 51: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 76: 63, 78: 63, 63, 63, 63, 63, 63, 86: 63},
		// 100
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 316},
		{3: 167, 167, 167, 7: 167, 167, 14: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 41: 167, 167, 167, 167, 47: 167, 167, 167, 167},
		{3: 166, 166, 166, 7: 166, 166, 14: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 41: 166, 166, 166, 166, 47: 166, 166, 166, 166},
		{62, 62, 62, 62, 62, 62, 62, 62, 9: 62, 62, 62, 62, 62, 39: 62, 62, 45: 62, 62, 51: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 76: 62, 78: 62, 62, 62, 62, 62, 62, 86: 62},
		{168, 168, 168, 6: 168, 9: 168, 168, 168, 168, 168, 39: 168, 45: 168, 168, 51: 168, 168, 168, 168, 168, 168, 319, 318, 138: 317},
		// 105
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 320, 254},
		{3: 40, 40, 40, 7: 40, 40, 14: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41: 40, 40, 40, 40, 47: 40, 40, 40, 40},
		{3: 39, 39, 39, 7: 39, 39, 14: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41: 39, 39, 39, 39, 47: 39, 39, 39, 39},
		{41, 41, 41, 6: 41, 9: 41, 41, 41, 41, 41, 39: 41, 45: 41, 41, 51: 41, 41, 41, 41, 41, 41, 41, 41},
		{139, 139, 139, 139, 139, 139, 139, 139, 9: 139, 139, 139, 139, 139, 39: 139, 139, 45: 139, 139, 51: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 76: 139, 78: 139, 139, 139, 139, 139, 139, 86: 139},
		// 110
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 54: 324, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 323},
		{45: 314, 313, 54: 325, 91: 312},
		{61, 61, 61, 61, 61, 61, 61, 61, 9: 61, 61, 61, 61, 61, 39: 61, 61, 45: 61, 61, 51: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 76: 61, 78: 61, 61, 61, 61, 61, 61, 86: 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 9: 60, 60, 60, 60, 60, 39: 60, 60, 45: 60, 60, 51: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 76: 60, 78: 60, 60, 60, 60, 60, 60, 86: 60},
		{2: 333},
		// 115
		{2: 202},
		{164, 164, 164, 6: 164, 9: 164, 164, 45: 314, 313, 52: 164, 164, 91: 312, 163: 329},
		{2, 2, 2, 6: 331, 9: 2, 2, 52: 2, 2, 98: 330},
		{165, 165, 165, 9: 165, 165, 52: 165, 165},
		{1, 1, 1, 301, 300, 298, 7: 266, 272, 1, 1, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 52: 1, 1, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 332},
		// 120
		{163, 163, 163, 6: 163, 9: 163, 163, 45: 314, 313, 52: 163, 163, 91: 312},
		{204, 204, 204, 204, 204, 204, 204, 204, 9: 204, 204, 204, 204, 204, 39: 204, 204, 45: 204, 204, 51: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 76: 204, 78: 204, 204, 204, 204, 204, 204, 86: 204},
		{7, 7, 7, 7, 7, 7, 7, 303, 9: 7, 7, 7, 7, 7, 39: 7, 7, 45: 7, 7, 51: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 76: 7, 78: 7, 7, 7, 7, 7, 7, 86: 304, 102: 307, 305, 306},
		{8, 8, 8, 8, 8, 8, 8, 303, 9: 8, 8, 8, 8, 8, 39: 8, 8, 45: 8, 8, 51: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 76: 8, 78: 8, 8, 8, 8, 8, 8, 86: 304, 102: 307, 305, 306},
		{9, 9, 9, 9, 9, 9, 9, 303, 9: 9, 9, 9, 9, 9, 39: 9, 9, 45: 9, 9, 51: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 76: 9, 78: 9, 9, 9, 9, 9, 9, 86: 304, 102: 307, 305, 306},
		// 125
		{8: 338},
		{98, 98, 98, 98, 98, 98, 98, 98, 9: 98, 98, 98, 98, 98, 39: 98, 98, 45: 98, 98, 51: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 76: 98, 78: 98, 98, 98, 98, 98, 98, 86: 98},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 352},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 351},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 350},
		// 130
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 349},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 348},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 347},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 346},
		{100, 100, 100, 100, 100, 100, 100, 9: 100, 100, 100, 100, 100, 39: 100, 100, 45: 100, 100, 51: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 76: 100, 78: 100, 100, 100, 100, 100, 100},
		// 135
		{101, 101, 101, 101, 101, 101, 101, 9: 101, 101, 101, 101, 101, 39: 101, 101, 45: 101, 101, 51: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 76: 101, 78: 101, 101, 101, 101, 101, 101},
		{102, 102, 102, 102, 102, 102, 102, 9: 102, 102, 102, 102, 102, 39: 102, 102, 45: 102, 102, 51: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 76: 102, 78: 102, 102, 102, 102, 102, 102},
		{103, 103, 103, 103, 103, 103, 103, 9: 103, 103, 103, 103, 103, 39: 103, 103, 45: 103, 103, 51: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 76: 103, 78: 103, 103, 103, 103, 103, 103},
		{104, 104, 104, 104, 104, 104, 104, 9: 104, 104, 104, 104, 104, 39: 104, 104, 45: 104, 104, 51: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 76: 104, 78: 104, 104, 104, 104, 104, 104},
		{105, 105, 105, 105, 105, 105, 105, 9: 105, 105, 105, 105, 105, 39: 105, 105, 45: 105, 105, 51: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 76: 105, 78: 105, 105, 105, 105, 105, 105},
		// 140
		{106, 106, 106, 106, 106, 106, 106, 9: 106, 106, 106, 106, 106, 39: 106, 106, 45: 106, 106, 51: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 76: 106, 78: 106, 106, 106, 106, 106, 106},
		{2: 354, 45: 314, 313, 91: 312},
		{122, 122, 122, 122, 122, 122, 122, 122, 9: 122, 122, 122, 122, 122, 39: 122, 122, 45: 122, 122, 51: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 76: 122, 78: 122, 122, 122, 122, 122, 122, 86: 122},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 362},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 361},
		// 145
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 360},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 359},
		{108, 108, 108, 108, 108, 108, 108, 9: 108, 108, 108, 108, 108, 39: 108, 108, 45: 108, 108, 51: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 76: 345, 78: 343, 340, 344, 339, 341, 342},
		{109, 109, 109, 109, 109, 109, 109, 9: 109, 109, 109, 109, 109, 39: 109, 109, 45: 109, 109, 51: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 76: 345, 78: 343, 340, 344, 339, 341, 342},
		{110, 110, 110, 110, 110, 110, 110, 9: 110, 110, 110, 110, 110, 39: 110, 110, 45: 110, 110, 51: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 76: 345, 78: 343, 340, 344, 339, 341, 342},
		// 150
		{111, 111, 111, 111, 111, 111, 111, 9: 111, 111, 111, 111, 111, 39: 111, 111, 45: 111, 111, 51: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 76: 345, 78: 343, 340, 344, 339, 341, 342},
		{7: 399},
		{60: 388, 387},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 384},
		{14: 381, 40: 382},
		// 155
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 380},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 379},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 378},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 377},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 376},
		// 160
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 375},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 374},
		{146, 146, 146, 358, 357, 355, 146, 9: 146, 146, 146, 146, 146, 39: 146, 146, 45: 146, 146, 51: 146, 146, 146, 146, 146, 146, 146, 146, 356, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146},
		{147, 147, 147, 358, 357, 355, 147, 9: 147, 147, 147, 147, 147, 39: 147, 147, 45: 147, 147, 51: 147, 147, 147, 147, 147, 147, 147, 147, 356, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{148, 148, 148, 358, 357, 355, 148, 9: 148, 148, 148, 148, 148, 39: 148, 148, 45: 148, 148, 51: 148, 148, 148, 148, 148, 148, 148, 148, 356, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148},
		// 165
		{149, 149, 149, 358, 357, 355, 149, 9: 149, 149, 149, 149, 149, 39: 149, 149, 45: 149, 149, 51: 149, 149, 149, 149, 149, 149, 149, 149, 356, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149},
		{150, 150, 150, 358, 357, 355, 150, 9: 150, 150, 150, 150, 150, 39: 150, 150, 45: 150, 150, 51: 150, 150, 150, 150, 150, 150, 150, 150, 356, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150},
		{151, 151, 151, 358, 357, 355, 151, 9: 151, 151, 151, 151, 151, 39: 151, 151, 45: 151, 151, 51: 151, 151, 151, 151, 151, 151, 151, 151, 356, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151},
		{152, 152, 152, 358, 357, 355, 152, 9: 152, 152, 152, 152, 152, 39: 152, 152, 45: 152, 152, 51: 152, 152, 152, 152, 152, 152, 152, 152, 356, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152},
		{155, 155, 155, 6: 155, 9: 155, 155, 155, 155, 155, 39: 155, 45: 155, 155, 51: 155, 155, 155, 155, 155, 155, 155, 155},
		// 170
		{14: 383},
		{154, 154, 154, 6: 154, 9: 154, 154, 154, 154, 154, 39: 154, 45: 154, 154, 51: 154, 154, 154, 154, 154, 154, 154, 154},
		{3: 358, 357, 355, 57: 385, 59: 356},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 386},
		{157, 157, 157, 358, 357, 355, 157, 9: 157, 157, 157, 157, 157, 39: 157, 45: 157, 157, 51: 157, 157, 157, 157, 157, 157, 157, 157, 356},
		// 175
		{7: 392},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 389},
		{3: 358, 357, 355, 57: 390, 59: 356},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 391},
		{156, 156, 156, 358, 357, 355, 156, 9: 156, 156, 156, 156, 156, 39: 156, 45: 156, 156, 51: 156, 156, 156, 156, 156, 156, 156, 156, 356},
		// 180
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 96: 222, 100: 393, 394},
		{2: 398},
		{396, 2: 94, 113: 395},
		{2: 397},
		{2: 93},
		// 185
		{158, 158, 158, 6: 158, 9: 158, 158, 158, 158, 158, 39: 158, 45: 158, 158, 51: 158, 158, 158, 158, 158, 158, 158, 158},
		{160, 160, 160, 6: 160, 9: 160, 160, 160, 160, 160, 39: 160, 45: 160, 160, 51: 160, 160, 160, 160, 160, 160, 160, 160},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 96: 222, 100: 400, 401},
		{2: 404},
		{396, 2: 94, 113: 402},
		// 190
		{2: 403},
		{159, 159, 159, 6: 159, 9: 159, 159, 159, 159, 159, 39: 159, 45: 159, 159, 51: 159, 159, 159, 159, 159, 159, 159, 159},
		{161, 161, 161, 6: 161, 9: 161, 161, 161, 161, 161, 39: 161, 45: 161, 161, 51: 161, 161, 161, 161, 161, 161, 161, 161},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 406},
		{2: 407, 45: 314, 313, 91: 312},
		// 195
		{191, 191, 191, 191, 191, 191, 191, 191, 9: 191, 191, 191, 191, 191, 39: 191, 191, 45: 191, 191, 51: 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 76: 191, 78: 191, 191, 191, 191, 191, 191, 86: 191},
		{2, 2, 6: 410, 13: 2, 98: 409},
		{208, 208, 13: 208},
		{1, 1, 8: 246, 13: 1, 92: 244, 119: 411},
		{206, 206, 6: 206, 13: 206},
		// 200
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 413},
		{209, 209, 6: 209, 13: 209, 45: 314, 313, 91: 312},
		{8: 240, 97: 415},
		{38, 38},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 422, 271, 84: 270, 255, 87: 273, 254, 252, 418, 135: 419, 165: 420, 179: 421},
		// 205
		{3: 73, 73, 73, 7: 73, 73, 14: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 41: 73, 73, 73, 73, 47: 73, 73, 73, 73, 76: 73},
		{6: 144, 45: 314, 313, 51: 144, 55: 477, 91: 312, 164: 476},
		{6: 142, 51: 142},
		{6: 474, 51: 71},
		{51: 423},
		// 210
		{51: 72},
		{7: 426, 425, 139: 427, 424, 177: 428},
		{92, 92, 92, 6: 92, 9: 92, 92, 12: 92, 92, 39: 92, 55: 472, 93: 92, 92, 92, 176: 471},
		{96, 96, 96, 6: 96, 9: 96, 96, 12: 96, 96, 39: 96, 55: 96, 93: 96, 96, 96},
		{96: 222, 101: 468},
		// 215
		{90, 90, 90, 6: 90, 9: 90, 90, 12: 90, 90, 39: 90, 93: 90, 90, 90},
		{2, 2, 2, 6: 429, 9: 2, 2, 12: 2, 2, 39: 2, 93: 2, 2, 2, 98: 430},
		{1, 1, 1, 7: 426, 425, 1, 1, 12: 1, 1, 39: 1, 93: 1, 1, 1, 139: 467, 424},
		{81, 81, 81, 9: 81, 81, 12: 81, 81, 39: 81, 93: 433, 431, 432, 170: 435, 436, 434},
		{99: 87, 110: 87},
		// 220
		{99: 86, 110: 86},
		{99: 85, 110: 85},
		{99: 84, 110: 463, 175: 464},
		{80, 80, 80, 9: 80, 80, 12: 80, 80, 39: 80},
		{69, 69, 69, 9: 69, 69, 12: 69, 250, 39: 69, 114: 438, 184: 437},
		// 225
		{67, 67, 67, 9: 67, 67, 12: 67, 39: 439, 166: 441, 180: 440},
		{68, 68, 68, 9: 68, 68, 12: 68, 39: 68},
		{122: 456},
		{65, 65, 65, 9: 65, 65, 12: 442, 173: 444, 183: 443},
		{66, 66, 66, 9: 66, 66, 12: 66},
		// 230
		{122: 451},
		{78, 78, 78, 9: 78, 446, 181: 445},
		{64, 64, 64, 9: 64, 64},
		{76, 76, 76, 9: 449, 182: 448},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 447},
		// 235
		{77, 77, 77, 9: 77, 45: 314, 313, 91: 312},
		{79, 79, 79},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 450},
		{75, 75, 75, 45: 314, 313, 91: 312},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 100: 452},
		// 240
		{120, 120, 120, 9: 120, 120, 52: 454, 455, 174: 453},
		{121, 121, 121, 9: 121, 121},
		{119, 119, 119, 9: 119, 119},
		{118, 118, 118, 9: 118, 118},
		{8: 246, 92: 457, 123: 458},
		// 245
		{198, 198, 198, 6: 198, 9: 198, 198, 12: 198, 154: 459},
		{140, 140, 140, 9: 140, 140, 12: 140},
		{2, 2, 2, 6: 461, 9: 2, 2, 12: 2, 98: 460},
		{199, 199, 199, 9: 199, 199, 12: 199},
		{1, 1, 1, 8: 246, 1, 1, 12: 1, 92: 462},
		// 250
		{197, 197, 197, 6: 197, 9: 197, 197, 12: 197},
		{99: 83},
		{99: 465},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 466},
		{82, 82, 82, 9: 82, 82, 12: 82, 82, 39: 82, 45: 314, 313, 91: 312},
		// 255
		{89, 89, 89, 6: 89, 9: 89, 89, 12: 89, 89, 39: 89, 93: 89, 89, 89},
		{396, 2: 94, 113: 469},
		{2: 470},
		{95, 95, 95, 6: 95, 9: 95, 95, 12: 95, 95, 39: 95, 55: 95, 93: 95, 95, 95},
		{97, 97, 97, 6: 97, 9: 97, 97, 12: 97, 97, 39: 97, 93: 97, 97, 97},
		// 260
		{8: 473},
		{91, 91, 91, 6: 91, 9: 91, 91, 12: 91, 91, 39: 91, 93: 91, 91, 91},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 418, 135: 475},
		{6: 141, 51: 141},
		{6: 145, 51: 145},
		// 265
		{8: 478},
		{6: 143, 51: 143},
		{8: 240, 97: 480},
		{7: 482, 96: 136, 112: 136, 167: 481},
		{96: 222, 101: 486, 112: 485},
		// 270
		{8: 246, 92: 457, 123: 483},
		{2: 484},
		{96: 135, 112: 135},
		{7: 487},
		{137, 137},
		// 275
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 100: 488},
		{2: 489},
		{134, 134, 6: 134, 168: 490},
		{2, 2, 6: 492, 98: 491},
		{138, 138},
		// 280
		{1, 1, 7: 493},
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 328, 100: 494},
		{2: 495},
		{133, 133, 6: 133},
		{8: 174, 108: 503, 162: 502},
		// 285
		{8: 240, 97: 498, 108: 499},
		{172, 172},
		{107: 500},
		{8: 240, 97: 501},
		{171, 171},
		// 290
		{8: 505},
		{107: 504},
		{8: 173},
		{175, 175},
		{8: 240, 97: 507},
		// 295
		{177, 177, 13: 250, 114: 508},
		{176, 176},
		{109: 540},
		{109: 185},
		{8: 240, 97: 512, 108: 513},
		// 300
		{7: 535},
		{40: 514},
		{107: 515},
		{8: 240, 97: 516},
		{7: 517},
		// 305
		{8: 246, 92: 518, 105: 519},
		{15: 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 70: 525},
		{2: 182, 6: 182, 129: 520},
		{2: 2, 6: 522, 98: 521},
		{2: 524},
		// 310
		{2: 1, 8: 246, 92: 518, 105: 523},
		{2: 181, 6: 181},
		{183, 183},
		{193, 193, 193, 301, 300, 298, 193, 266, 272, 11: 193, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 40: 527, 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 528, 155: 529, 526},
		{179, 179, 179, 6: 179, 11: 532, 159: 533, 531},
		// 315
		{14: 530},
		{194, 194, 194, 6: 194, 11: 194, 45: 314, 313, 91: 312},
		{192, 192, 192, 6: 192, 11: 192},
		{195, 195, 195, 6: 195, 11: 195},
		{201, 201, 201, 6: 201},
		// 320
		{3: 301, 300, 298, 7: 266, 272, 14: 257, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 282, 286, 287, 288, 289, 285, 290, 291, 292, 294, 295, 296, 297, 293, 41: 256, 259, 260, 261, 47: 264, 262, 258, 299, 70: 251, 268, 263, 267, 269, 265, 77: 271, 84: 270, 255, 87: 273, 254, 252, 534},
		{178, 178, 178, 6: 178},
		{180, 180, 180, 6: 180, 45: 314, 313, 91: 312},
		{8: 246, 92: 518, 105: 536},
		{2: 182, 6: 182, 129: 537},
		// 325
		{2: 2, 6: 522, 98: 538},
		{2: 539},
		{184, 184},
		{8: 188, 108: 542, 157: 541},
		{8: 545},
		// 330
		{40: 543},
		{107: 544},
		{8: 187},
		{99: 546},
		{8: 547},
		// 335
		{7: 548},
		{8: 549},
		{2: 550, 7: 551},
		{190, 190},
		{2: 552},
		// 340
		{2: 553},
		{189, 189},
		{205, 205},
		{8: 240, 97: 556},
		{106: 558, 116: 557},
		// 345
		{8: 246, 92: 518, 105: 561},
		{153: 559},
		{8: 246, 92: 560},
		{210, 210},
		{211, 211},
		// 350
		{170, 170, 96: 222, 101: 234, 106: 219, 117: 214, 224, 120: 215, 225, 124: 216, 226, 217, 227, 228, 130: 229, 218, 230, 231, 223, 136: 220, 232, 141: 221, 233, 144: 563, 238, 235, 239, 236},
		{44, 44},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 191

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok {
				msg = "syntax error"
			}
			if msg != "" {
				yylex.Error(msg)
			}
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.item = &alterTableAddStmt{tableName: yyS[yypt-2].item.(string), c: yyS[yypt-0].item.(*col)}
		}
	case 2:
		{
			yyVAL.item = &alterTableDropColumnStmt{tableName: yyS[yypt-3].item.(string), colName: yyS[yypt-0].item.(string)}
		}
	case 3:
		{
			yyVAL.item = assignment{colName: yyS[yypt-2].item.(string), expr: yyS[yypt-0].item.(expression)}
		}
	case 4:
		{
			yyVAL.item = append([]assignment{yyS[yypt-2].item.(assignment)}, yyS[yypt-1].item.([]assignment)...)
		}
	case 5:
		{
			yyVAL.item = []assignment{}
		}
	case 6:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]assignment), yyS[yypt-0].item.(assignment))
		}
	case 7:
		{
			yyVAL.item = beginTransactionStmt{}
		}
	case 8:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 9:
		{
			yyVAL.item = []expression{}
		}
	case 11:
		{
			x := &col{name: yyS[yypt-3].item.(string), typ: yyS[yypt-2].item.(int), constraint: yyS[yypt-1].item.(*constraint)}
			if yyS[yypt-0].item != nil {
				x.dflt = yyS[yypt-0].item.(expression)
			}
			yyVAL.item = x
		}
	case 13:
		{
			yyVAL.item = append([]string{yyS[yypt-2].item.(string)}, yyS[yypt-1].item.([]string)...)
		}
	case 14:
		{
			yyVAL.item = []string{}
		}
	case 15:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].item.(string))
		}
	case 16:
		{
			yyVAL.item = commitStmt{}
		}
	case 17:
		{
			yyVAL.item = &constraint{}
		}
	case 18:
		{
			yyVAL.item = &constraint{yyS[yypt-0].item.(expression)}
		}
	case 19:
		{
			yyVAL.item = (*constraint)(nil)
		}
	case 21:
		{
			yyVAL.item = &conversion{typ: yyS[yypt-3].item.(int), val: yyS[yypt-1].item.(expression)}
		}
	case 22:
		{
			indexName, tableName, columnName := yyS[yypt-5].item.(string), yyS[yypt-3].item.(string), yyS[yypt-1].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-8].item.(bool), ifNotExists: yyS[yypt-6].item.(bool), indexName: indexName, tableName: tableName, colName: columnName}
			if indexName == tableName || indexName == columnName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 23:
		{
			indexName, tableName, columnName := yyS[yypt-7].item.(string), yyS[yypt-5].item.(string), yyS[yypt-3].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-10].item.(bool), ifNotExists: yyS[yypt-8].item.(bool), indexName: indexName, tableName: tableName, colName: "id()"}
			if yyS[yypt-3].item.(string) != "id" {
				yylex.(*lexer).err("only the built-in function id() can be used in index: %s()", columnName)
				return 1
			}

			if indexName == tableName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 24:
		{
			yyVAL.item = false
		}
	case 25:
		{
			yyVAL.item = true
		}
	case 26:
		{
			yyVAL.item = false
		}
	case 27:
		{
			yyVAL.item = true
		}
	case 28:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 29:
		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{ifNotExists: true, tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 30:
		{
			yyVAL.item = []*col{}
		}
	case 31:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]*col), yyS[yypt-0].item.(*col))
		}
	case 32:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 33:
		{
			yyVAL.item = nil
		}
	case 35:
		{
			yyVAL.item = &truncateTableStmt{yyS[yypt-0].item.(string)}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[yyS[yypt-0].item.(string)] {
				yylex.(*lexer).err("name is used for system tables: %s", yyS[yypt-0].item.(string))
				return 1
			}
		}
	case 36:
		{
			yyVAL.item = &deleteStmt{tableName: yyS[yypt-1].item.(string), where: yyS[yypt-0].item.(*whereRset).expr}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[yyS[yypt-1].item.(string)] {
				yylex.(*lexer).err("name is used for system tables: %s", yyS[yypt-1].item.(string))
				return 1
			}
		}
	case 37:
		{
			yyVAL.item = &dropIndexStmt{ifExists: yyS[yypt-1].item.(bool), indexName: yyS[yypt-0].item.(string)}
		}
	case 38:
		{
			yyVAL.item = false
		}
	case 39:
		{
			yyVAL.item = true
		}
	case 40:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{tableName: nm}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 41:
		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{ifExists: true, tableName: nm}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 42:
		{
			yyVAL.item = nil
		}
	case 44:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(oror, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 47:
		{
			yyVAL.item = append([]expression{yyS[yypt-2].item.(expression)}, yyS[yypt-1].item.([]expression)...)
		}
	case 48:
		{
			yyVAL.item = []expression(nil)
		}
	case 49:
		{
			yyVAL.item = append(yyS[yypt-2].item.([]expression), yyS[yypt-0].item.(expression))
		}
	case 51:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-4].item.(expression), list: yyS[yypt-1].item.([]expression)}
		}
	case 52:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-5].item.(expression), not: true, list: yyS[yypt-1].item.([]expression)}
		}
	case 53:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-5].item.(expression), sel: yyS[yypt-2].item.(*selectStmt)}
		}
	case 54:
		{
			yyVAL.item = &pIn{expr: yyS[yypt-6].item.(expression), not: true, sel: yyS[yypt-2].item.(*selectStmt)}
		}
	case 55:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-4].item, yyS[yypt-2].item, yyS[yypt-0].item, false); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 56:
		{
			var err error
			if yyVAL.item, err = newBetween(yyS[yypt-5].item, yyS[yypt-2].item, yyS[yypt-0].item, true); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 57:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-2].item.(expression)}
		}
	case 58:
		{
			yyVAL.item = &isNull{expr: yyS[yypt-3].item.(expression), not: true}
		}
	case 60:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(ge, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 61:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('>', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 62:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(le, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 63:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('<', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 64:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(neq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 65:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(eq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 66:
		{
			yyVAL.item = &pLike{expr: yyS[yypt-2].item.(expression), pattern: yyS[yypt-0].item.(expression)}
		}
	case 67:
		{
			expr, name := yyS[yypt-1].item.(expression), yyS[yypt-0].item.(string)
			if name == "" {
				s, ok := expr.(*ident)
				if ok {
					name = s.s
				}
			}
			yyVAL.item = &fld{expr: expr, name: name}
		}
	case 68:
		{
			yyVAL.item = ""
		}
	case 69:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 70:
		{
			yyVAL.item = []*fld{yyS[yypt-0].item.(*fld)}
		}
	case 71:
		{
			l, f := yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld)
			if f.name != "" {
				if f := findFld(l, f.name); f != nil {
					yylex.(*lexer).err("duplicate field name %q", f.name)
					return 1
				}
			}

			yyVAL.item = append(yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld))
		}
	case 72:
		{
			yyVAL.item = &groupByRset{colNames: yyS[yypt-0].item.([]string)}
		}
	case 73:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 74:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-7].item.(string), colNames: yyS[yypt-6].item.([]string), lists: append([][]expression{yyS[yypt-3].item.([]expression)}, yyS[yypt-1].item.([][]expression)...)}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[yyS[yypt-7].item.(string)] {
				yylex.(*lexer).err("name is used for system tables: %s", yyS[yypt-7].item.(string))
				return 1
			}
		}
	case 75:
		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-2].item.(string), colNames: yyS[yypt-1].item.([]string), sel: yyS[yypt-0].item.(*selectStmt)}
		}
	case 76:
		{
			yyVAL.item = []string{}
		}
	case 77:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 78:
		{
			yyVAL.item = [][]expression{}
		}
	case 79:
		{
			yyVAL.item = append(yyS[yypt-4].item.([][]expression), yyS[yypt-1].item.([]expression))
		}
	case 87:
		{
			yyVAL.item = value{yyS[yypt-0].item}
		}
	case 88:
		{
			n := yyS[yypt-0].item.(int)
			yyVAL.item = parameter{n}
			l := yylex.(*lexer)
			l.params = mathutil.Max(l.params, n)
			if n == 0 {
				l.err("parameter number must be non zero")
				return 1
			}
		}
	case 89:
		{
			yyVAL.item = &ident{yyS[yypt-0].item.(string)}
		}
	case 90:
		{
			yyVAL.item = &pexpr{expr: yyS[yypt-1].item.(expression)}
		}
	case 91:
		{
			yyVAL.item = &orderByRset{by: yyS[yypt-1].item.([]expression), asc: yyS[yypt-0].item.(bool)}
		}
	case 92:
		{
			yyVAL.item = true // ASC by default
		}
	case 93:
		{
			yyVAL.item = true
		}
	case 94:
		{
			yyVAL.item = false
		}
	case 97:
		{
			var err error
			if yyVAL.item, err = newIndex(yyS[yypt-1].item.(expression), yyS[yypt-0].item.(expression)); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 98:
		{
			var err error
			s := yyS[yypt-0].item.([2]*expression)
			if yyVAL.item, err = newSlice(yyS[yypt-1].item.(expression), s[0], s[1]); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 99:
		{
			x := yylex.(*lexer)
			f, ok := yyS[yypt-1].item.(*ident)
			if !ok {
				x.err("expected identifier or qualified identifier")
				return 1
			}

			var err error
			var agg bool
			if yyVAL.item, agg, err = newCall(f.s, yyS[yypt-0].item.([]expression)); err != nil {
				x.err("%v", err)
				return 1
			}
			if n := len(x.agg); n > 0 {
				x.agg[n-1] = x.agg[n-1] || agg
			}
		}
	case 101:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('^', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 102:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('|', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 103:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation('-', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 104:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('+', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 106:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(andnot, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 107:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('&', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 108:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(lsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 109:
		{
			var err error
			yyVAL.item, err = newBinaryOperation(rsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 110:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('%', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 111:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('/', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 112:
		{
			var err error
			yyVAL.item, err = newBinaryOperation('*', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 114:
		{
			yyVAL.item = fmt.Sprintf("%s.%s", yyS[yypt-2].item.(string), yyS[yypt-0].item.(string))
		}
	case 115:
		{
			yyVAL.item = []interface{}{yyS[yypt-1].item, yyS[yypt-0].item}
		}
	case 117:
		{
			yyVAL.item = yyS[yypt-2].item
		}
	case 120:
		{
			yyVAL.item = ""
		}
	case 121:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 122:
		{
			yyVAL.list = []interface{}{yyS[yypt-0].item}
		}
	case 123:
		{
			yyVAL.list = append(yyS[yypt-2].list, yyS[yypt-0].item)
		}
	case 124:
		{
			yyVAL.item = rollbackStmt{}
		}
	case 128:
		{
			yyVAL.item = nil
		}
	case 131:
		{
			yyVAL.item = nil
		}
	case 133:
		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-10].item.(bool),
				flds:          yyS[yypt-9].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-7].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 134:
		{
			yyVAL.item = (*limitRset)(nil)
		}
	case 135:
		{
			yyVAL.item = &limitRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 136:
		{
			yyVAL.item = (*offsetRset)(nil)
		}
	case 137:
		{
			yyVAL.item = &offsetRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 138:
		{
			yyVAL.item = false
		}
	case 139:
		{
			yyVAL.item = true
		}
	case 140:
		{
			yyVAL.item = []*fld{}
		}
	case 141:
		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 142:
		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 143:
		{
			yyVAL.item = (*whereRset)(nil)
		}
	case 145:
		{
			yyVAL.item = (*groupByRset)(nil)
		}
	case 147:
		{
			yyVAL.item = (*orderByRset)(nil)
		}
	case 149:
		{
			yyVAL.item = [2]*expression{nil, nil}
		}
	case 150:
		{
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{nil, &hi}
		}
	case 151:
		{
			lo := yyS[yypt-2].item.(expression)
			yyVAL.item = [2]*expression{&lo, nil}
		}
	case 152:
		{
			lo := yyS[yypt-3].item.(expression)
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{&lo, &hi}
		}
	case 167:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = []stmt{yyS[yypt-0].item.(stmt)}
			}
		}
	case 168:
		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = append(yylex.(*lexer).list, yyS[yypt-0].item.(stmt))
			}
		}
	case 171:
		{
			var err error
			if yyVAL.item, err = newBinaryOperation(andand, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 174:
		{
			yyVAL.item = &truncateTableStmt{tableName: yyS[yypt-0].item.(string)}
		}
	case 199:
		{
			yyVAL.item = &updateStmt{tableName: yyS[yypt-3].item.(string), list: yyS[yypt-1].item.([]assignment), where: yyS[yypt-0].item.(*whereRset).expr}

			if yylex.(*lexer).root {
				break
			}

			if isSystemName[yyS[yypt-3].item.(string)] {
				yylex.(*lexer).err("name is used for system tables: %s", yyS[yypt-3].item.(string))
				return 1
			}
		}
	case 200:
		{
			yyVAL.item = nowhere
		}
	case 203:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('^', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 204:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('!', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 205:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('-', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 206:
		{
			var err error
			yyVAL.item, err = newUnaryOperation('+', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 207:
		{
			yyVAL.item = &whereRset{expr: yyS[yypt-0].item.(expression)}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
