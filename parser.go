// Copyright (c) 2014 Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Inital yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package ql

import __yyfmt__ "fmt"

import (
	"fmt"

	"github.com/cznic/mathutil"
)

type yySymType struct {
	yys  int
	line int
	col  int
	item interface{}
	list []interface{}
}

const add = 57346
const alter = 57347
const and = 57348
const andand = 57349
const andnot = 57350
const as = 57351
const asc = 57352
const begin = 57353
const between = 57354
const bigIntType = 57355
const bigRatType = 57356
const blobType = 57357
const boolType = 57358
const by = 57359
const byteType = 57360
const column = 57361
const commit = 57362
const complex128Type = 57363
const complex64Type = 57364
const create = 57365
const deleteKwd = 57366
const desc = 57367
const distinct = 57368
const drop = 57369
const durationType = 57370
const eq = 57371
const exists = 57372
const falseKwd = 57373
const floatType = 57374
const float32Type = 57375
const float64Type = 57376
const floatLit = 57377
const from = 57378
const ge = 57379
const group = 57380
const identifier = 57381
const ifKwd = 57382
const imaginaryLit = 57383
const in = 57384
const index = 57385
const insert = 57386
const intType = 57387
const int16Type = 57388
const int32Type = 57389
const int64Type = 57390
const int8Type = 57391
const into = 57392
const intLit = 57393
const is = 57394
const le = 57395
const limit = 57396
const lsh = 57397
const neq = 57398
const not = 57399
const null = 57400
const offset = 57401
const on = 57402
const order = 57403
const oror = 57404
const qlParam = 57405
const rollback = 57406
const rsh = 57407
const runeType = 57408
const selectKwd = 57409
const stringType = 57410
const stringLit = 57411
const tableKwd = 57412
const timeType = 57413
const transaction = 57414
const trueKwd = 57415
const truncate = 57416
const uintType = 57417
const uint16Type = 57418
const uint32Type = 57419
const uint64Type = 57420
const uint8Type = 57421
const unique = 57422
const update = 57423
const values = 57424
const where = 57425

var yyToknames = []string{
	"add",
	"alter",
	"and",
	"andand",
	"andnot",
	"as",
	"asc",
	"begin",
	"between",
	"bigIntType",
	"bigRatType",
	"blobType",
	"boolType",
	"by",
	"byteType",
	"column",
	"commit",
	"complex128Type",
	"complex64Type",
	"create",
	"deleteKwd",
	"desc",
	"distinct",
	"drop",
	"durationType",
	"eq",
	"exists",
	"falseKwd",
	"floatType",
	"float32Type",
	"float64Type",
	"floatLit",
	"from",
	"ge",
	"group",
	"identifier",
	"ifKwd",
	"imaginaryLit",
	"in",
	"index",
	"insert",
	"intType",
	"int16Type",
	"int32Type",
	"int64Type",
	"int8Type",
	"into",
	"intLit",
	"is",
	"le",
	"limit",
	"lsh",
	"neq",
	"not",
	"null",
	"offset",
	"on",
	"order",
	"oror",
	"qlParam",
	"rollback",
	"rsh",
	"runeType",
	"selectKwd",
	"stringType",
	"stringLit",
	"tableKwd",
	"timeType",
	"transaction",
	"trueKwd",
	"truncate",
	"uintType",
	"uint16Type",
	"uint32Type",
	"uint64Type",
	"uint8Type",
	"unique",
	"update",
	"values",
	"where",
}
var yyStatenames = []string{}

const yyEOFCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 197
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 861

var yyAct = []int{

	219, 218, 255, 308, 171, 298, 181, 285, 230, 62,
	263, 170, 111, 236, 184, 14, 76, 63, 41, 268,
	60, 237, 147, 129, 59, 28, 57, 165, 271, 129,
	64, 129, 244, 143, 144, 145, 146, 158, 186, 58,
	129, 157, 303, 302, 322, 320, 112, 135, 44, 129,
	313, 46, 246, 48, 186, 51, 53, 312, 292, 109,
	275, 290, 289, 247, 142, 252, 282, 279, 269, 149,
	120, 250, 137, 233, 220, 314, 163, 133, 278, 150,
	257, 242, 121, 232, 121, 187, 235, 136, 139, 192,
	164, 141, 134, 126, 118, 306, 256, 277, 260, 32,
	169, 187, 224, 128, 121, 65, 30, 35, 40, 33,
	148, 151, 152, 153, 143, 144, 145, 146, 143, 144,
	145, 146, 177, 138, 140, 25, 29, 25, 129, 58,
	175, 182, 167, 131, 36, 287, 228, 309, 197, 196,
	179, 180, 245, 178, 174, 195, 119, 198, 199, 200,
	201, 202, 203, 191, 189, 188, 299, 37, 215, 194,
	45, 204, 205, 206, 207, 221, 42, 52, 42, 47,
	225, 117, 159, 160, 161, 162, 50, 227, 208, 209,
	210, 211, 212, 213, 214, 113, 129, 294, 226, 193,
	266, 254, 42, 222, 241, 231, 190, 173, 122, 265,
	127, 17, 34, 240, 243, 229, 176, 18, 124, 123,
	2, 318, 114, 39, 172, 300, 19, 249, 239, 20,
	21, 288, 132, 22, 267, 305, 319, 276, 259, 112,
	223, 183, 166, 16, 258, 115, 15, 253, 1, 43,
	23, 155, 54, 38, 270, 13, 238, 185, 274, 262,
	261, 74, 317, 286, 272, 70, 72, 296, 125, 12,
	24, 154, 264, 25, 56, 283, 130, 61, 280, 281,
	26, 251, 3, 284, 11, 49, 10, 27, 293, 9,
	8, 291, 31, 116, 7, 71, 6, 234, 217, 156,
	295, 5, 297, 182, 168, 301, 110, 4, 304, 0,
	310, 0, 311, 307, 85, 86, 87, 88, 0, 89,
	316, 315, 90, 91, 0, 0, 321, 0, 0, 92,
	0, 0, 77, 93, 94, 95, 80, 0, 0, 0,
	84, 0, 81, 0, 0, 0, 96, 97, 98, 99,
	100, 0, 82, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 73, 0, 0, 101, 0, 102,
	83, 0, 103, 0, 79, 0, 104, 105, 106, 107,
	108, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 273, 66, 0, 68, 69, 85, 86, 87,
	88, 0, 89, 0, 67, 90, 91, 0, 0, 0,
	0, 0, 92, 0, 0, 77, 93, 94, 95, 80,
	0, 0, 0, 84, 0, 81, 0, 0, 0, 96,
	97, 98, 99, 100, 0, 82, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 73, 0, 0,
	101, 0, 102, 83, 0, 103, 0, 79, 0, 104,
	105, 106, 107, 108, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 248, 66, 0, 68, 69,
	85, 86, 87, 88, 0, 89, 0, 67, 90, 91,
	0, 0, 0, 0, 0, 92, 0, 0, 77, 93,
	94, 95, 80, 0, 0, 0, 84, 0, 81, 0,
	0, 0, 96, 97, 98, 99, 100, 0, 82, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	73, 0, 0, 101, 0, 102, 83, 0, 103, 0,
	79, 0, 104, 105, 106, 107, 108, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 66,
	0, 68, 69, 85, 86, 87, 88, 0, 89, 216,
	67, 90, 91, 0, 0, 0, 0, 0, 92, 0,
	0, 77, 93, 94, 95, 80, 0, 0, 0, 84,
	0, 81, 0, 0, 0, 96, 97, 98, 99, 100,
	0, 82, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 73, 0, 0, 101, 0, 102, 83,
	0, 103, 0, 79, 0, 104, 105, 106, 107, 108,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 66, 0, 68, 69, 0, 0, 0, 55,
	0, 0, 0, 67, 85, 86, 87, 88, 0, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 92,
	0, 0, 77, 93, 94, 95, 80, 0, 0, 0,
	84, 0, 81, 0, 0, 0, 96, 97, 98, 99,
	100, 0, 82, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 73, 0, 0, 101, 0, 102,
	83, 0, 103, 0, 79, 0, 104, 105, 106, 107,
	108, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 85, 86, 87,
	88, 0, 89, 0, 67, 90, 91, 0, 0, 0,
	0, 0, 92, 0, 0, 77, 93, 94, 95, 80,
	0, 0, 0, 84, 0, 81, 0, 0, 0, 96,
	97, 98, 99, 100, 0, 82, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 73, 0, 0,
	101, 0, 102, 83, 0, 103, 0, 79, 0, 104,
	105, 106, 107, 108, 85, 86, 87, 88, 0, 89,
	75, 0, 90, 91, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 98, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 102,
	0, 0, 103, 0, 0, 0, 104, 105, 106, 107,
	108,
}
var yyPact = []int{

	196, -76, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, 34, -1000,
	29, 166, 64, 107, -1000, 187, 38, 153, 196, 153,
	-1000, 117, 129, -1000, 153, 136, 127, 153, 540, -1000,
	153, 146, -1000, -1000, 208, 131, 8, 89, 21, 159,
	179, -1000, 178, 7, 164, -1000, 18, -1000, 124, 215,
	-1000, 35, -59, 14, -1000, -49, 714, 714, 714, 714,
	-1000, -1000, -1000, -1000, -1000, 631, 4, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -73, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21, -1000, 16, -1000, 146, 195, 158, 87, 146, 176,
	-1000, 631, -1000, -1000, 153, 58, 146, 15, 631, 631,
	-1000, 157, 631, 3, 147, 631, 81, 631, 631, 631,
	631, 631, 631, 631, 631, 631, 631, 631, 631, 631,
	631, 631, 631, 631, -1000, -1000, -1000, 457, 631, -49,
	-49, -49, -49, -13, 631, 154, -1000, -1000, 17, 631,
	-1000, 781, 146, 76, 175, -1000, 153, 66, -1000, -3,
	-1000, -14, -1000, 1, -1000, 209, -1000, 60, -1000, 215,
	-1000, -1000, 631, -5, 631, 26, -1000, 84, -59, -59,
	-59, -59, -59, -59, 14, 14, 14, 14, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -39, 374, -16, -1000, 66,
	-1000, -22, -1000, -1000, 146, 66, -1000, -1000, 152, -1000,
	11, -6, 631, -1000, 13, -1, 161, -1000, -1000, 151,
	-82, -19, 631, 22, 631, -1000, -1000, 291, -1000, -31,
	-1000, 12, -1000, -1000, -8, -20, 146, 146, -21, -1000,
	146, -1000, 161, 74, -1000, 204, -1000, -25, -1000, -1000,
	-26, 631, -59, -1000, -33, -1000, -1000, 631, 148, -1000,
	-1000, -1000, -1000, -1000, 74, 102, -1000, 198, 146, -1000,
	-1000, -59, -1000, 66, -44, 11, 10, 102, 78, 631,
	631, -1000, -1000, -30, -37, -1000, -11, 78, -1000, 631,
	66, 201, -42, -1000, 631, -1000, 66, -1000, -1000, -1000,
	-1000, -43, -1000,
}
var yyPgo = []int{

	0, 297, 12, 296, 294, 291, 289, 288, 11, 4,
	6, 287, 286, 285, 284, 283, 282, 280, 8, 279,
	276, 275, 274, 272, 0, 1, 271, 20, 267, 26,
	266, 264, 262, 261, 259, 258, 257, 256, 255, 253,
	252, 251, 105, 9, 17, 14, 247, 246, 245, 15,
	243, 242, 5, 13, 10, 3, 7, 241, 210, 238,
	18, 24, 236, 16, 30, 233, 232, 21, 231, 230,
	228, 2, 227, 225, 224,
}
var yyR1 = []int{

	0, 1, 1, 2, 3, 4, 4, 69, 69, 5,
	6, 7, 7, 8, 9, 10, 11, 11, 70, 70,
	12, 13, 14, 14, 15, 15, 16, 16, 17, 17,
	18, 18, 71, 71, 19, 19, 20, 21, 21, 22,
	22, 23, 24, 24, 25, 26, 26, 72, 72, 27,
	27, 27, 27, 27, 27, 27, 28, 28, 28, 28,
	28, 28, 28, 29, 30, 30, 31, 31, 32, 33,
	34, 34, 35, 35, 36, 36, 73, 73, 37, 37,
	37, 37, 37, 37, 37, 38, 38, 38, 38, 39,
	40, 40, 40, 42, 42, 42, 42, 42, 43, 43,
	43, 43, 43, 44, 44, 44, 44, 44, 44, 44,
	44, 41, 41, 45, 46, 46, 74, 74, 47, 47,
	68, 68, 48, 49, 49, 52, 52, 55, 55, 50,
	50, 51, 51, 51, 53, 53, 54, 54, 56, 56,
	57, 57, 57, 57, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	60, 61, 61, 62, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 65, 66,
	66, 64, 64, 64, 64, 64, 67,
}
var yyR2 = []int{

	0, 5, 6, 3, 3, 0, 3, 0, 1, 2,
	3, 0, 1, 2, 1, 3, 0, 3, 0, 1,
	1, 4, 10, 12, 0, 3, 0, 1, 8, 11,
	0, 3, 0, 1, 3, 4, 4, 0, 2, 3,
	5, 0, 1, 3, 3, 0, 3, 0, 1, 1,
	5, 6, 5, 6, 3, 4, 1, 3, 3, 3,
	3, 3, 3, 2, 0, 2, 1, 3, 3, 3,
	10, 5, 0, 3, 0, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 4,
	0, 1, 1, 1, 1, 2, 2, 2, 1, 3,
	3, 3, 3, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 2, 1, 4, 0, 1, 0, 2,
	1, 3, 1, 10, 11, 0, 2, 0, 2, 0,
	1, 1, 1, 2, 0, 1, 0, 1, 0, 1,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 0,
	1, 1, 2, 2, 2, 2, 2,
}
var yyChk = []int{

	-1000, -59, -58, -23, -1, -5, -12, -14, -17, -19,
	-20, -22, -34, -48, -49, -62, -65, 5, 11, 20,
	23, 24, 27, 44, 64, 67, 74, 81, 101, 70,
	72, -16, 70, 80, 36, 43, 70, 50, -50, 26,
	70, -60, 39, -58, -60, 43, -60, 40, -60, -21,
	40, -60, 40, -60, -51, 99, -31, -29, -24, -61,
	-27, -28, -43, -44, -64, -42, 92, 103, 94, 95,
	-38, -13, -37, 63, -41, 86, -63, 31, 58, 73,
	35, 41, 51, 69, 39, 13, 14, 15, 16, 18,
	21, 22, 28, 32, 33, 34, 45, 46, 47, 48,
	49, 66, 68, 71, 75, 76, 77, 78, 79, -60,
	-3, -2, -9, 39, 4, 27, -15, 40, 86, 57,
	-67, 83, 39, 30, 30, -35, 86, 36, 85, 62,
	-30, 9, 7, 42, 57, 12, 52, 37, 88, 53,
	89, 56, 29, 92, 93, 94, 95, 8, 96, 55,
	65, 97, 98, 99, -33, -57, -6, 90, 86, -42,
	-42, -42, -42, -24, 86, 100, -66, -67, -4, 84,
	-8, -9, 19, 39, 57, -8, 30, -24, -60, 82,
	-49, -10, -9, -68, -45, -46, 39, 86, -29, -61,
	39, -27, 86, 42, 12, -43, 58, 57, -43, -43,
	-43, -43, -43, -43, -44, -44, -44, -44, -64, -64,
	-64, -64, -64, -64, -64, -24, 102, -7, -25, -24,
	87, -24, 39, -69, 85, -24, -63, -9, 60, 30,
	-18, -60, 86, 87, -11, 85, -53, -67, -47, 9,
	-49, -25, 86, -43, 6, 58, 91, 102, 91, -24,
	87, -26, 87, -2, 39, -71, 85, 86, -25, -70,
	85, -45, -53, -54, -32, 38, 39, -74, 101, 87,
	-25, 6, -43, 91, -24, 91, -72, 85, 86, 87,
	-8, -8, 87, -9, -54, -56, -39, 61, 17, 87,
	87, -43, 91, -24, 39, -18, -36, -56, -52, 54,
	17, -10, 87, 86, -71, -73, 85, -52, -55, 59,
	-24, -25, 87, 87, 86, -55, -24, -40, 10, 25,
	87, -25, 87,
}
var yyDef = []int{

	41, -2, 158, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 0, 0, 20,
	26, 0, 0, 0, 122, 129, 0, 0, 41, 0,
	9, 0, 0, 27, 0, 37, 0, 0, 0, 130,
	0, 0, 160, 159, 0, 24, 0, 0, 34, 0,
	0, 39, 0, 72, 0, 131, 132, 66, 64, 42,
	161, 49, 56, 98, 103, 191, 0, 0, 0, 0,
	93, 94, 85, 86, 87, 0, 0, 78, 79, 80,
	81, 82, 83, 84, 111, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 163,
	189, 5, 0, 14, 0, 0, 0, 0, 0, 0,
	35, 0, 36, 38, 0, 0, 0, 0, 133, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 0, 11, 192,
	193, 194, 195, 0, 0, 0, 188, 190, 7, 0,
	1, 0, 0, 0, 0, 30, 0, 196, 40, 0,
	71, 0, 16, 134, 120, 118, 114, 0, 67, 43,
	65, 162, 0, 0, 0, 0, 54, 0, 57, 58,
	59, 60, 61, 62, 99, 100, 101, 102, 104, 105,
	106, 107, 108, 109, 110, 0, 0, 0, 12, 45,
	88, 0, 112, 4, 8, 3, 13, 2, 0, 25,
	32, 0, 0, 73, 18, 134, 136, 135, 113, 0,
	116, 0, 0, 0, 0, 55, 69, 0, 140, 0,
	10, 47, 21, 6, 0, 0, 33, 0, 0, 15,
	19, 121, 136, 138, 137, 0, 119, 0, 117, 50,
	0, 0, 52, 142, 0, 141, 44, 48, 0, 28,
	31, 30, 74, 17, 138, 125, 139, 0, 0, 115,
	51, 53, 143, 46, 0, 32, 76, 125, 127, 0,
	0, 68, 22, 0, 0, 70, 77, 127, 123, 0,
	126, 90, 0, 29, 0, 124, 128, 89, 91, 92,
	23, 0, 75,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 103, 3, 3, 3, 97, 96, 3,
	86, 87, 99, 95, 85, 94, 100, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 102, 101,
	89, 84, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 90, 3, 91, 92, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83,
}
var yyTok3 = []int{
	0,
}

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:

		{
			yyVAL.item = &alterTableAddStmt{tableName: yyS[yypt-2].item.(string), c: yyS[yypt-0].item.(*col)}
		}
	case 2:

		{
			yyVAL.item = &alterTableDropColumnStmt{tableName: yyS[yypt-3].item.(string), colName: yyS[yypt-0].item.(string)}
		}
	case 3:

		{
			yyVAL.item = assignment{colName: yyS[yypt-2].item.(string), expr: yyS[yypt-0].item.(expression)}
		}
	case 4:

		{
			yyVAL.item = append([]assignment{yyS[yypt-2].item.(assignment)}, yyS[yypt-1].item.([]assignment)...)
		}
	case 5:

		{
			yyVAL.item = []assignment{}
		}
	case 6:

		{
			yyVAL.item = append(yyS[yypt-2].item.([]assignment), yyS[yypt-0].item.(assignment))
		}
	case 9:

		{
			yyVAL.item = beginTransactionStmt{}
		}
	case 10:

		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 11:

		{
			yyVAL.item = []expression{}
		}
	case 12:
		yyVAL.item = yyS[yypt-0].item
	case 13:

		{
			yyVAL.item = &col{name: yyS[yypt-1].item.(string), typ: yyS[yypt-0].item.(int)}
		}
	case 14:
		yyVAL.item = yyS[yypt-0].item
	case 15:

		{
			yyVAL.item = append([]string{yyS[yypt-2].item.(string)}, yyS[yypt-1].item.([]string)...)
		}
	case 16:

		{
			yyVAL.item = []string{}
		}
	case 17:

		{
			yyVAL.item = append(yyS[yypt-2].item.([]string), yyS[yypt-0].item.(string))
		}
	case 20:

		{
			yyVAL.item = commitStmt{}
		}
	case 21:

		{
			yyVAL.item = &conversion{typ: yyS[yypt-3].item.(int), val: yyS[yypt-1].item.(expression)}
		}
	case 22:

		{
			indexName, tableName, columnName := yyS[yypt-5].item.(string), yyS[yypt-3].item.(string), yyS[yypt-1].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-8].item.(bool), ifNotExists: yyS[yypt-6].item.(bool), indexName: indexName, tableName: tableName, colName: columnName}
			if indexName == tableName || indexName == columnName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 23:

		{
			indexName, tableName, columnName := yyS[yypt-7].item.(string), yyS[yypt-5].item.(string), yyS[yypt-3].item.(string)
			yyVAL.item = &createIndexStmt{unique: yyS[yypt-10].item.(bool), ifNotExists: yyS[yypt-8].item.(bool), indexName: indexName, tableName: tableName, colName: "id()"}
			if yyS[yypt-3].item.(string) != "id" {
				yylex.(*lexer).err("only the built-in function id() can be used in index: %s()", columnName)
				return 1
			}

			if indexName == tableName {
				yylex.(*lexer).err("index name collision: %s", indexName)
				return 1
			}

			if isSystemName[indexName] || isSystemName[tableName] {
				yylex.(*lexer).err("name is used for system tables: %s", indexName)
				return 1
			}
		}
	case 24:

		{
			yyVAL.item = false
		}
	case 25:

		{
			yyVAL.item = true
		}
	case 26:

		{
			yyVAL.item = false
		}
	case 27:

		{
			yyVAL.item = true
		}
	case 28:

		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 29:

		{
			nm := yyS[yypt-5].item.(string)
			yyVAL.item = &createTableStmt{ifNotExists: true, tableName: nm, cols: append([]*col{yyS[yypt-3].item.(*col)}, yyS[yypt-2].item.([]*col)...)}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 30:

		{
			yyVAL.item = []*col{}
		}
	case 31:

		{
			yyVAL.item = append(yyS[yypt-2].item.([]*col), yyS[yypt-0].item.(*col))
		}
	case 34:

		{
			yyVAL.item = &truncateTableStmt{yyS[yypt-0].item.(string)}
		}
	case 35:

		{
			yyVAL.item = &deleteStmt{tableName: yyS[yypt-1].item.(string), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 36:

		{
			yyVAL.item = &dropIndexStmt{ifExists: yyS[yypt-1].item.(bool), indexName: yyS[yypt-0].item.(string)}
		}
	case 37:

		{
			yyVAL.item = false
		}
	case 38:

		{
			yyVAL.item = true
		}
	case 39:

		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 40:

		{
			nm := yyS[yypt-0].item.(string)
			yyVAL.item = &dropTableStmt{ifExists: true, tableName: nm}
			if isSystemName[nm] {
				yylex.(*lexer).err("name is used for system tables: %s", nm)
				return 1
			}
		}
	case 41:

		{
			yyVAL.item = nil
		}
	case 42:
		yyVAL.item = yyS[yypt-0].item
	case 43:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(oror, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 44:

		{
			yyVAL.item = append([]expression{yyS[yypt-2].item.(expression)}, yyS[yypt-1].item.([]expression)...)
		}
	case 45:

		{
			yyVAL.item = []expression(nil)
		}
	case 46:

		{
			yyVAL.item = append(yyS[yypt-2].item.([]expression), yyS[yypt-0].item.(expression))
		}
	case 49:
		yyVAL.item = yyS[yypt-0].item
	case 50:

		{
			yyVAL.item = &pIn{expr: yyS[yypt-4].item.(expression), list: yyS[yypt-1].item.([]expression)}
		}
	case 51:

		{
			yyVAL.item = &pIn{expr: yyS[yypt-5].item.(expression), not: true, list: yyS[yypt-1].item.([]expression)}
		}
	case 52:

		{
			yyVAL.item = &pBetween{expr: yyS[yypt-4].item.(expression), l: yyS[yypt-2].item.(expression), h: yyS[yypt-0].item.(expression)}
		}
	case 53:

		{
			yyVAL.item = &pBetween{expr: yyS[yypt-5].item.(expression), not: true, l: yyS[yypt-2].item.(expression), h: yyS[yypt-0].item.(expression)}
		}
	case 54:

		{
			yyVAL.item = &isNull{expr: yyS[yypt-2].item.(expression)}
		}
	case 55:

		{
			yyVAL.item = &isNull{expr: yyS[yypt-3].item.(expression), not: true}
		}
	case 56:
		yyVAL.item = yyS[yypt-0].item
	case 57:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(ge, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 58:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation('>', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 59:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(le, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 60:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation('<', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 61:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(neq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 62:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(eq, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 63:

		{
			expr, name := yyS[yypt-1].item.(expression), yyS[yypt-0].item.(string)
			if name == "" {
				s, ok := expr.(*ident)
				if ok {
					name = s.s
				}
			}
			yyVAL.item = &fld{expr: expr, name: name}
		}
	case 64:

		{
			yyVAL.item = ""
		}
	case 65:

		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 66:

		{
			yyVAL.item = []*fld{yyS[yypt-0].item.(*fld)}
		}
	case 67:

		{
			l, f := yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld)
			if f.name != "" {
				if f := findFld(l, f.name); f != nil {
					yylex.(*lexer).err("duplicate field name %q", f.name)
					return 1
				}
			}

			yyVAL.item = append(yyS[yypt-2].item.([]*fld), yyS[yypt-0].item.(*fld))
		}
	case 68:

		{
			yyVAL.item = &groupByRset{colNames: yyS[yypt-0].item.([]string)}
		}
	case 69:

		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 70:

		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-7].item.(string), colNames: yyS[yypt-6].item.([]string), lists: append([][]expression{yyS[yypt-3].item.([]expression)}, yyS[yypt-1].item.([][]expression)...)}
		}
	case 71:

		{
			yyVAL.item = &insertIntoStmt{tableName: yyS[yypt-2].item.(string), colNames: yyS[yypt-1].item.([]string), sel: yyS[yypt-0].item.(*selectStmt)}
		}
	case 72:

		{
			yyVAL.item = []string{}
		}
	case 73:

		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 74:

		{
			yyVAL.item = [][]expression{}
		}
	case 75:

		{
			yyVAL.item = append(yyS[yypt-4].item.([][]expression), yyS[yypt-1].item.([]expression))
		}
	case 78:
		yyVAL.item = yyS[yypt-0].item
	case 79:
		yyVAL.item = yyS[yypt-0].item
	case 80:
		yyVAL.item = yyS[yypt-0].item
	case 81:
		yyVAL.item = yyS[yypt-0].item
	case 82:
		yyVAL.item = yyS[yypt-0].item
	case 83:
		yyVAL.item = yyS[yypt-0].item
	case 84:
		yyVAL.item = yyS[yypt-0].item
	case 85:

		{
			yyVAL.item = value{yyS[yypt-0].item}
		}
	case 86:

		{
			n := yyS[yypt-0].item.(int)
			yyVAL.item = parameter{n}
			l := yylex.(*lexer)
			l.params = mathutil.Max(l.params, n)
			if n == 0 {
				l.err("parameter number must be non zero")
				return 1
			}
		}
	case 87:

		{
			yyVAL.item = &ident{yyS[yypt-0].item.(string)}
		}
	case 88:

		{
			yyVAL.item = &pexpr{expr: yyS[yypt-1].item.(expression)}
		}
	case 89:

		{
			yyVAL.item = &orderByRset{by: yyS[yypt-1].item.([]expression), asc: yyS[yypt-0].item.(bool)}
		}
	case 90:

		{
			yyVAL.item = true // ASC by default
		}
	case 91:

		{
			yyVAL.item = true
		}
	case 92:

		{
			yyVAL.item = false
		}
	case 93:
		yyVAL.item = yyS[yypt-0].item
	case 94:
		yyVAL.item = yyS[yypt-0].item
	case 95:

		{
			var err error
			if yyVAL.item, err = newIndex(yyS[yypt-1].item.(expression), yyS[yypt-0].item.(expression)); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 96:

		{
			var err error
			s := yyS[yypt-0].item.([2]*expression)
			if yyVAL.item, err = newSlice(yyS[yypt-1].item.(expression), s[0], s[1]); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 97:

		{
			x := yylex.(*lexer)
			f, ok := yyS[yypt-1].item.(*ident)
			if !ok {
				x.err("expected identifier or qualified identifier")
				return 1
			}

			var err error
			var agg bool
			if yyVAL.item, agg, err = newCall(f.s, yyS[yypt-0].item.([]expression)); err != nil {
				x.err("%v", err)
				return 1
			}
			if n := len(x.agg); n > 0 {
				x.agg[n-1] = x.agg[n-1] || agg
			}
		}
	case 98:
		yyVAL.item = yyS[yypt-0].item
	case 99:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation('^', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 100:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation('|', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 101:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation('-', yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 102:

		{
			var err error
			yyVAL.item, err = newBinaryOperation('+', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 103:
		yyVAL.item = yyS[yypt-0].item
	case 104:

		{
			var err error
			yyVAL.item, err = newBinaryOperation(andnot, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 105:

		{
			var err error
			yyVAL.item, err = newBinaryOperation('&', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 106:

		{
			var err error
			yyVAL.item, err = newBinaryOperation(lsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 107:

		{
			var err error
			yyVAL.item, err = newBinaryOperation(rsh, yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 108:

		{
			var err error
			yyVAL.item, err = newBinaryOperation('%', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 109:

		{
			var err error
			yyVAL.item, err = newBinaryOperation('/', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 110:

		{
			var err error
			yyVAL.item, err = newBinaryOperation('*', yyS[yypt-2].item, yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 111:
		yyVAL.item = yyS[yypt-0].item
	case 112:

		{
			yyVAL.item = fmt.Sprintf("%s.%s", yyS[yypt-2].item.(string), yyS[yypt-0].item.(string))
		}
	case 113:

		{
			yyVAL.item = []interface{}{yyS[yypt-1].item, yyS[yypt-0].item}
		}
	case 114:
		yyVAL.item = yyS[yypt-0].item
	case 115:

		{
			yyVAL.item = yyS[yypt-2].item
		}
	case 118:

		{
			yyVAL.item = ""
		}
	case 119:

		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 120:

		{
			yyVAL.list = []interface{}{yyS[yypt-0].item}
		}
	case 121:

		{
			yyVAL.list = append(yyS[yypt-2].list, yyS[yypt-0].item)
		}
	case 122:

		{
			yyVAL.item = rollbackStmt{}
		}
	case 123:

		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-8].item.(bool),
				flds:          yyS[yypt-7].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-5].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 124:

		{
			x := yylex.(*lexer)
			n := len(x.agg)
			yyVAL.item = &selectStmt{
				distinct:      yyS[yypt-9].item.(bool),
				flds:          yyS[yypt-8].item.([]*fld),
				from:          &crossJoinRset{sources: yyS[yypt-6].list},
				hasAggregates: x.agg[n-1],
				where:         yyS[yypt-4].item.(*whereRset),
				group:         yyS[yypt-3].item.(*groupByRset),
				order:         yyS[yypt-2].item.(*orderByRset),
				limit:         yyS[yypt-1].item.(*limitRset),
				offset:        yyS[yypt-0].item.(*offsetRset),
			}
			x.agg = x.agg[:n-1]
		}
	case 125:

		{
			yyVAL.item = (*limitRset)(nil)
		}
	case 126:

		{
			yyVAL.item = &limitRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 127:

		{
			yyVAL.item = (*offsetRset)(nil)
		}
	case 128:

		{
			yyVAL.item = &offsetRset{expr: yyS[yypt-0].item.(expression)}
		}
	case 129:

		{
			yyVAL.item = false
		}
	case 130:

		{
			yyVAL.item = true
		}
	case 131:

		{
			yyVAL.item = []*fld{}
		}
	case 132:

		{
			yyVAL.item = yyS[yypt-0].item
		}
	case 133:

		{
			yyVAL.item = yyS[yypt-1].item
		}
	case 134:

		{
			yyVAL.item = (*whereRset)(nil)
		}
	case 135:
		yyVAL.item = yyS[yypt-0].item
	case 136:

		{
			yyVAL.item = (*groupByRset)(nil)
		}
	case 137:
		yyVAL.item = yyS[yypt-0].item
	case 138:

		{
			yyVAL.item = (*orderByRset)(nil)
		}
	case 139:
		yyVAL.item = yyS[yypt-0].item
	case 140:

		{
			yyVAL.item = [2]*expression{nil, nil}
		}
	case 141:

		{
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{nil, &hi}
		}
	case 142:

		{
			lo := yyS[yypt-2].item.(expression)
			yyVAL.item = [2]*expression{&lo, nil}
		}
	case 143:

		{
			lo := yyS[yypt-3].item.(expression)
			hi := yyS[yypt-1].item.(expression)
			yyVAL.item = [2]*expression{&lo, &hi}
		}
	case 144:
		yyVAL.item = yyS[yypt-0].item
	case 145:
		yyVAL.item = yyS[yypt-0].item
	case 146:
		yyVAL.item = yyS[yypt-0].item
	case 147:
		yyVAL.item = yyS[yypt-0].item
	case 148:
		yyVAL.item = yyS[yypt-0].item
	case 149:
		yyVAL.item = yyS[yypt-0].item
	case 150:
		yyVAL.item = yyS[yypt-0].item
	case 151:
		yyVAL.item = yyS[yypt-0].item
	case 152:
		yyVAL.item = yyS[yypt-0].item
	case 153:
		yyVAL.item = yyS[yypt-0].item
	case 154:
		yyVAL.item = yyS[yypt-0].item
	case 155:
		yyVAL.item = yyS[yypt-0].item
	case 156:
		yyVAL.item = yyS[yypt-0].item
	case 157:
		yyVAL.item = yyS[yypt-0].item
	case 158:

		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = []stmt{yyS[yypt-0].item.(stmt)}
			}
		}
	case 159:

		{
			if yyS[yypt-0].item != nil {
				yylex.(*lexer).list = append(yylex.(*lexer).list, yyS[yypt-0].item.(stmt))
			}
		}
	case 160:
		yyVAL.item = yyS[yypt-0].item
	case 161:
		yyVAL.item = yyS[yypt-0].item
	case 162:

		{
			var err error
			if yyVAL.item, err = newBinaryOperation(andand, yyS[yypt-2].item, yyS[yypt-0].item); err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 163:

		{
			yyVAL.item = &truncateTableStmt{tableName: yyS[yypt-0].item.(string)}
		}
	case 164:
		yyVAL.item = yyS[yypt-0].item
	case 165:
		yyVAL.item = yyS[yypt-0].item
	case 166:
		yyVAL.item = yyS[yypt-0].item
	case 167:
		yyVAL.item = yyS[yypt-0].item
	case 168:
		yyVAL.item = yyS[yypt-0].item
	case 169:
		yyVAL.item = yyS[yypt-0].item
	case 170:
		yyVAL.item = yyS[yypt-0].item
	case 171:
		yyVAL.item = yyS[yypt-0].item
	case 172:
		yyVAL.item = yyS[yypt-0].item
	case 173:
		yyVAL.item = yyS[yypt-0].item
	case 174:
		yyVAL.item = yyS[yypt-0].item
	case 175:
		yyVAL.item = yyS[yypt-0].item
	case 176:
		yyVAL.item = yyS[yypt-0].item
	case 177:
		yyVAL.item = yyS[yypt-0].item
	case 178:
		yyVAL.item = yyS[yypt-0].item
	case 179:
		yyVAL.item = yyS[yypt-0].item
	case 180:
		yyVAL.item = yyS[yypt-0].item
	case 181:
		yyVAL.item = yyS[yypt-0].item
	case 182:
		yyVAL.item = yyS[yypt-0].item
	case 183:
		yyVAL.item = yyS[yypt-0].item
	case 184:
		yyVAL.item = yyS[yypt-0].item
	case 185:
		yyVAL.item = yyS[yypt-0].item
	case 186:
		yyVAL.item = yyS[yypt-0].item
	case 187:
		yyVAL.item = yyS[yypt-0].item
	case 188:

		{
			yyVAL.item = &updateStmt{tableName: yyS[yypt-2].item.(string), list: yyS[yypt-1].item.([]assignment), where: yyS[yypt-0].item.(*whereRset).expr}
		}
	case 189:

		{
			yyVAL.item = nowhere
		}
	case 190:
		yyVAL.item = yyS[yypt-0].item
	case 191:
		yyVAL.item = yyS[yypt-0].item
	case 192:

		{
			var err error
			yyVAL.item, err = newUnaryOperation('^', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 193:

		{
			var err error
			yyVAL.item, err = newUnaryOperation('!', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 194:

		{
			var err error
			yyVAL.item, err = newUnaryOperation('-', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 195:

		{
			var err error
			yyVAL.item, err = newUnaryOperation('+', yyS[yypt-0].item)
			if err != nil {
				yylex.(*lexer).err("%v", err)
				return 1
			}
		}
	case 196:

		{
			yyVAL.item = &whereRset{expr: yyS[yypt-0].item.(expression)}
		}
	}
	goto yystack /* stack new state and value */
}
